{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fccdca79",
   "metadata": {
    "papermill": {
     "duration": 0.020821,
     "end_time": "2024-10-17T09:14:57.625193",
     "exception": false,
     "start_time": "2024-10-17T09:14:57.604372",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Data Loading\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9e8a905e",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-10-17T09:14:57.668544Z",
     "iopub.status.busy": "2024-10-17T09:14:57.667968Z",
     "iopub.status.idle": "2024-10-17T09:15:13.928535Z",
     "shell.execute_reply": "2024-10-17T09:15:13.926992Z"
    },
    "papermill": {
     "duration": 16.286824,
     "end_time": "2024-10-17T09:15:13.932112",
     "exception": false,
     "start_time": "2024-10-17T09:14:57.645288",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: tensorflow in /opt/conda/lib/python3.10/site-packages (2.16.1)\r\n",
      "Requirement already satisfied: scikit-learn in /opt/conda/lib/python3.10/site-packages (1.2.2)\r\n",
      "Requirement already satisfied: pandas in /opt/conda/lib/python3.10/site-packages (2.2.2)\r\n",
      "Requirement already satisfied: numpy in /opt/conda/lib/python3.10/site-packages (1.26.4)\r\n",
      "Requirement already satisfied: absl-py>=1.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.4.0)\r\n",
      "Requirement already satisfied: astunparse>=1.6.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.6.3)\r\n",
      "Requirement already satisfied: flatbuffers>=23.5.26 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (24.3.25)\r\n",
      "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.5.4)\r\n",
      "Requirement already satisfied: google-pasta>=0.1.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.2.0)\r\n",
      "Requirement already satisfied: h5py>=3.10.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.11.0)\r\n",
      "Requirement already satisfied: libclang>=13.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (18.1.1)\r\n",
      "Requirement already satisfied: ml-dtypes~=0.3.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.3.2)\r\n",
      "Requirement already satisfied: opt-einsum>=2.3.2 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.3.0)\r\n",
      "Requirement already satisfied: packaging in /opt/conda/lib/python3.10/site-packages (from tensorflow) (21.3)\r\n",
      "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.20.3)\r\n",
      "Requirement already satisfied: requests<3,>=2.21.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.32.3)\r\n",
      "Requirement already satisfied: setuptools in /opt/conda/lib/python3.10/site-packages (from tensorflow) (70.0.0)\r\n",
      "Requirement already satisfied: six>=1.12.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.16.0)\r\n",
      "Requirement already satisfied: termcolor>=1.1.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.4.0)\r\n",
      "Requirement already satisfied: typing-extensions>=3.6.6 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (4.12.2)\r\n",
      "Requirement already satisfied: wrapt>=1.11.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.16.0)\r\n",
      "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (1.64.1)\r\n",
      "Requirement already satisfied: tensorboard<2.17,>=2.16 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (2.16.2)\r\n",
      "Requirement already satisfied: keras>=3.0.0 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (3.3.3)\r\n",
      "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /opt/conda/lib/python3.10/site-packages (from tensorflow) (0.37.0)\r\n",
      "Requirement already satisfied: scipy>=1.3.2 in /opt/conda/lib/python3.10/site-packages (from scikit-learn) (1.14.1)\r\n",
      "Requirement already satisfied: joblib>=1.1.1 in /opt/conda/lib/python3.10/site-packages (from scikit-learn) (1.4.2)\r\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /opt/conda/lib/python3.10/site-packages (from scikit-learn) (3.5.0)\r\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in /opt/conda/lib/python3.10/site-packages (from pandas) (2.9.0.post0)\r\n",
      "Requirement already satisfied: pytz>=2020.1 in /opt/conda/lib/python3.10/site-packages (from pandas) (2024.1)\r\n",
      "Requirement already satisfied: tzdata>=2022.7 in /opt/conda/lib/python3.10/site-packages (from pandas) (2024.1)\r\n",
      "Requirement already satisfied: wheel<1.0,>=0.23.0 in /opt/conda/lib/python3.10/site-packages (from astunparse>=1.6.0->tensorflow) (0.43.0)\r\n",
      "Requirement already satisfied: rich in /opt/conda/lib/python3.10/site-packages (from keras>=3.0.0->tensorflow) (13.7.1)\r\n",
      "Requirement already satisfied: namex in /opt/conda/lib/python3.10/site-packages (from keras>=3.0.0->tensorflow) (0.0.8)\r\n",
      "Requirement already satisfied: optree in /opt/conda/lib/python3.10/site-packages (from keras>=3.0.0->tensorflow) (0.11.0)\r\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow) (3.3.2)\r\n",
      "Requirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow) (3.7)\r\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow) (1.26.18)\r\n",
      "Requirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests<3,>=2.21.0->tensorflow) (2024.8.30)\r\n",
      "Requirement already satisfied: markdown>=2.6.8 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.17,>=2.16->tensorflow) (3.6)\r\n",
      "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.17,>=2.16->tensorflow) (0.7.2)\r\n",
      "Requirement already satisfied: werkzeug>=1.0.1 in /opt/conda/lib/python3.10/site-packages (from tensorboard<2.17,>=2.16->tensorflow) (3.0.4)\r\n",
      "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /opt/conda/lib/python3.10/site-packages (from packaging->tensorflow) (3.1.2)\r\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in /opt/conda/lib/python3.10/site-packages (from werkzeug>=1.0.1->tensorboard<2.17,>=2.16->tensorflow) (2.1.5)\r\n",
      "Requirement already satisfied: markdown-it-py>=2.2.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras>=3.0.0->tensorflow) (3.0.0)\r\n",
      "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /opt/conda/lib/python3.10/site-packages (from rich->keras>=3.0.0->tensorflow) (2.18.0)\r\n",
      "Requirement already satisfied: mdurl~=0.1 in /opt/conda/lib/python3.10/site-packages (from markdown-it-py>=2.2.0->rich->keras>=3.0.0->tensorflow) (0.1.2)\r\n"
     ]
    }
   ],
   "source": [
    "!pip install tensorflow scikit-learn pandas numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "af30f054",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:13.977265Z",
     "iopub.status.busy": "2024-10-17T09:15:13.976791Z",
     "iopub.status.idle": "2024-10-17T09:15:13.983083Z",
     "shell.execute_reply": "2024-10-17T09:15:13.981687Z"
    },
    "papermill": {
     "duration": 0.032238,
     "end_time": "2024-10-17T09:15:13.986057",
     "exception": false,
     "start_time": "2024-10-17T09:15:13.953819",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def prep_ing(x):\n",
    "    return x.strip().replace(' ', '_')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "95c7d3cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:14.030019Z",
     "iopub.status.busy": "2024-10-17T09:15:14.029565Z",
     "iopub.status.idle": "2024-10-17T09:15:16.107706Z",
     "shell.execute_reply": "2024-10-17T09:15:16.106438Z"
    },
    "papermill": {
     "duration": 2.103605,
     "end_time": "2024-10-17T09:15:16.110926",
     "exception": false,
     "start_time": "2024-10-17T09:15:14.007321",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "dfs = []\n",
    "dfsi = []\n",
    "tdf = pd.read_csv(\"/kaggle/input/bsd-dsd/RecipeDB_Merged_1.csv\")\n",
    "for i in range(1,6):\n",
    "    dfs.append(pd.read_csv(f\"/kaggle/input/bsd-dbs/indian_{i} (1).csv\"))\n",
    "    dfs[-1][\"len\"] = dfs[-1].apply(lambda x : int(i), axis = 1)\n",
    "    dfsi.append(pd.read_csv(f\"/kaggle/input/bsd-dbs/italian_{i} (1).csv\"))\n",
    "    dfsi[-1][\"len\"] = dfsi[-1].apply(lambda x : int(i), axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2322797e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:16.155430Z",
     "iopub.status.busy": "2024-10-17T09:15:16.154971Z",
     "iopub.status.idle": "2024-10-17T09:15:16.197931Z",
     "shell.execute_reply": "2024-10-17T09:15:16.196429Z"
    },
    "papermill": {
     "duration": 0.068877,
     "end_time": "2024-10-17T09:15:16.201673",
     "exception": false,
     "start_time": "2024-10-17T09:15:16.132796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "dfs[0] = pd.read_csv(f\"/kaggle/input/bsd-dbs/indian_all.csv\")\n",
    "dfs[0][\"len\"] = dfs[-1].apply(lambda x : int(1), axis = 1)\n",
    "dfsi[0] = pd.read_csv(f\"/kaggle/input/bsd-dbs/french_all.csv\")\n",
    "dfsi[0][\"len\"] = dfsi[-1].apply(lambda x : int(1), axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6bd91534",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:16.248327Z",
     "iopub.status.busy": "2024-10-17T09:15:16.247646Z",
     "iopub.status.idle": "2024-10-17T09:15:16.258361Z",
     "shell.execute_reply": "2024-10-17T09:15:16.256921Z"
    },
    "papermill": {
     "duration": 0.037354,
     "end_time": "2024-10-17T09:15:16.261477",
     "exception": false,
     "start_time": "2024-10-17T09:15:16.224123",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_in = pd.concat(dfs , axis=0)\n",
    "df_it = pd.concat(dfsi, axis=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "efb4dc8d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:16.307570Z",
     "iopub.status.busy": "2024-10-17T09:15:16.307093Z",
     "iopub.status.idle": "2024-10-17T09:15:16.465193Z",
     "shell.execute_reply": "2024-10-17T09:15:16.463983Z"
    },
    "papermill": {
     "duration": 0.185468,
     "end_time": "2024-10-17T09:15:16.469313",
     "exception": false,
     "start_time": "2024-10-17T09:15:16.283845",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_in[\"tuple\"] = df_in.apply(lambda x: tuple([prep_ing(i) for i in eval(x[\"name\"])]),axis = 1)\n",
    "df_it[\"tuple\"] = df_it.apply(lambda x: tuple([prep_ing(i) for i in eval(x[\"name\"])]),axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "35f61455",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:16.513553Z",
     "iopub.status.busy": "2024-10-17T09:15:16.512999Z",
     "iopub.status.idle": "2024-10-17T09:15:16.552751Z",
     "shell.execute_reply": "2024-10-17T09:15:16.551124Z"
    },
    "papermill": {
     "duration": 0.067073,
     "end_time": "2024-10-17T09:15:16.556838",
     "exception": false,
     "start_time": "2024-10-17T09:15:16.489765",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>name</th>\n",
       "      <th>ratio</th>\n",
       "      <th>len</th>\n",
       "      <th>tuple</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>('curry leaf',)</td>\n",
       "      <td>0.999793</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(curry_leaf,)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>('ginger paste',)</td>\n",
       "      <td>0.999624</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(ginger_paste,)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>('ginger garlic paste',)</td>\n",
       "      <td>0.999592</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(ginger_garlic_paste,)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>('garam masala powder',)</td>\n",
       "      <td>0.999512</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(garam_masala_powder,)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>('black mustard seed',)</td>\n",
       "      <td>0.999503</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(black_mustard_seed,)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>95</td>\n",
       "      <td>('salt', 'water', 'turmeric', 'garlic clove', ...</td>\n",
       "      <td>0.997067</td>\n",
       "      <td>5.0</td>\n",
       "      <td>(salt, water, turmeric, garlic_clove, oil)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>96</td>\n",
       "      <td>('salt', 'ginger', 'turmeric', 'oil', 'coriand...</td>\n",
       "      <td>0.997067</td>\n",
       "      <td>5.0</td>\n",
       "      <td>(salt, ginger, turmeric, oil, coriander)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>97</td>\n",
       "      <td>('onion', 'ginger', 'turmeric', 'oil', 'corian...</td>\n",
       "      <td>0.997067</td>\n",
       "      <td>5.0</td>\n",
       "      <td>(onion, ginger, turmeric, oil, coriander)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>98</td>\n",
       "      <td>('turmeric', 'garlic clove', 'oil', 'cumin', '...</td>\n",
       "      <td>0.996979</td>\n",
       "      <td>5.0</td>\n",
       "      <td>(turmeric, garlic_clove, oil, cumin, coriander)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>99</td>\n",
       "      <td>('salt', 'turmeric', 'tomato', 'garlic clove',...</td>\n",
       "      <td>0.996979</td>\n",
       "      <td>5.0</td>\n",
       "      <td>(salt, turmeric, tomato, garlic_clove, oil)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3057 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Unnamed: 0                                               name     ratio  \\\n",
       "0            0                                    ('curry leaf',)  0.999793   \n",
       "1            1                                  ('ginger paste',)  0.999624   \n",
       "2            2                           ('ginger garlic paste',)  0.999592   \n",
       "3            3                           ('garam masala powder',)  0.999512   \n",
       "4            4                            ('black mustard seed',)  0.999503   \n",
       "..         ...                                                ...       ...   \n",
       "95          95  ('salt', 'water', 'turmeric', 'garlic clove', ...  0.997067   \n",
       "96          96  ('salt', 'ginger', 'turmeric', 'oil', 'coriand...  0.997067   \n",
       "97          97  ('onion', 'ginger', 'turmeric', 'oil', 'corian...  0.997067   \n",
       "98          98  ('turmeric', 'garlic clove', 'oil', 'cumin', '...  0.996979   \n",
       "99          99  ('salt', 'turmeric', 'tomato', 'garlic clove',...  0.996979   \n",
       "\n",
       "    len                                            tuple  \n",
       "0   1.0                                    (curry_leaf,)  \n",
       "1   1.0                                  (ginger_paste,)  \n",
       "2   1.0                           (ginger_garlic_paste,)  \n",
       "3   1.0                           (garam_masala_powder,)  \n",
       "4   1.0                            (black_mustard_seed,)  \n",
       "..  ...                                              ...  \n",
       "95  5.0       (salt, water, turmeric, garlic_clove, oil)  \n",
       "96  5.0         (salt, ginger, turmeric, oil, coriander)  \n",
       "97  5.0        (onion, ginger, turmeric, oil, coriander)  \n",
       "98  5.0  (turmeric, garlic_clove, oil, cumin, coriander)  \n",
       "99  5.0      (salt, turmeric, tomato, garlic_clove, oil)  \n",
       "\n",
       "[3057 rows x 5 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_in"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "d812d302",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:16.605977Z",
     "iopub.status.busy": "2024-10-17T09:15:16.604457Z",
     "iopub.status.idle": "2024-10-17T09:15:16.928660Z",
     "shell.execute_reply": "2024-10-17T09:15:16.927492Z"
    },
    "papermill": {
     "duration": 0.352188,
     "end_time": "2024-10-17T09:15:16.931590",
     "exception": false,
     "start_time": "2024-10-17T09:15:16.579402",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "td_in = tdf[tdf[\"Region\"] == \"Indian Subcontinent\"][[\"ingredients\",\"Instructions\"]]\n",
    "td_in[\"ingredients\"] = td_in.apply(lambda x: eval(x[\"ingredients\"]),axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fbf31ac7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:16.975170Z",
     "iopub.status.busy": "2024-10-17T09:15:16.974650Z",
     "iopub.status.idle": "2024-10-17T09:15:16.988149Z",
     "shell.execute_reply": "2024-10-17T09:15:16.986929Z"
    },
    "papermill": {
     "duration": 0.0387,
     "end_time": "2024-10-17T09:15:16.991038",
     "exception": false,
     "start_time": "2024-10-17T09:15:16.952338",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Indian Subcontinent', 'Mexican', 'South American', 'Italian',\n",
       "       'Canadian'], dtype=object)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tdf[\"Region\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ee124a36",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:17.036481Z",
     "iopub.status.busy": "2024-10-17T09:15:17.036067Z",
     "iopub.status.idle": "2024-10-17T09:15:17.154336Z",
     "shell.execute_reply": "2024-10-17T09:15:17.153117Z"
    },
    "papermill": {
     "duration": 0.145079,
     "end_time": "2024-10-17T09:15:17.157302",
     "exception": false,
     "start_time": "2024-10-17T09:15:17.012223",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "td_it = tdf[tdf[\"Region\"] == \"Italian\"][[\"ingredients\",\"Instructions\"]]\n",
    "td_it[\"ingredients\"] = td_it.apply(lambda x: eval(x[\"ingredients\"]),axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2281d7a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:17.201598Z",
     "iopub.status.busy": "2024-10-17T09:15:17.201108Z",
     "iopub.status.idle": "2024-10-17T09:15:17.390449Z",
     "shell.execute_reply": "2024-10-17T09:15:17.389364Z"
    },
    "papermill": {
     "duration": 0.214694,
     "end_time": "2024-10-17T09:15:17.393241",
     "exception": false,
     "start_time": "2024-10-17T09:15:17.178547",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "td_in[\"ingredients\"] = td_in.apply(lambda x: [prep_ing(i) for i in x[\"ingredients\"]],axis=1)\n",
    "td_it[\"ingredients\"] = td_it.apply(lambda x: [prep_ing(i) for i in x[\"ingredients\"]],axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f751ea68",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:17.438612Z",
     "iopub.status.busy": "2024-10-17T09:15:17.438154Z",
     "iopub.status.idle": "2024-10-17T09:15:19.035035Z",
     "shell.execute_reply": "2024-10-17T09:15:19.033845Z"
    },
    "papermill": {
     "duration": 1.623548,
     "end_time": "2024-10-17T09:15:19.038345",
     "exception": false,
     "start_time": "2024-10-17T09:15:17.414797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "train_in, test_in = train_test_split(td_in, test_size=0.25)\n",
    "train_it, test_it = train_test_split(td_it, test_size=0.25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d783bf66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:19.083681Z",
     "iopub.status.busy": "2024-10-17T09:15:19.083056Z",
     "iopub.status.idle": "2024-10-17T09:15:19.101415Z",
     "shell.execute_reply": "2024-10-17T09:15:19.100221Z"
    },
    "papermill": {
     "duration": 0.044537,
     "end_time": "2024-10-17T09:15:19.104112",
     "exception": false,
     "start_time": "2024-10-17T09:15:19.059575",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ingredients</th>\n",
       "      <th>Instructions</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4635</th>\n",
       "      <td>[angel_hair_pasta, olive_oil, chicken_breast_h...</td>\n",
       "      <td>bring a large pot of lightly salted water to a...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5257</th>\n",
       "      <td>[purpose_flour, bread_crumb, italian_seasoning...</td>\n",
       "      <td>preheat the oven to 350 degrees f . in a plast...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4782</th>\n",
       "      <td>[beef, onion, garlic, basil, oregano, brown_su...</td>\n",
       "      <td>in a skillet over medium heat , brown ground b...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4891</th>\n",
       "      <td>[veal_scallop, salt_pepper, purpose_flour, but...</td>\n",
       "      <td>season veal with salt and pepper to taste ; dr...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5576</th>\n",
       "      <td>[olive_oil, onion, tomato, garlic, tomato_past...</td>\n",
       "      <td>in a large heavy bottomed pot , heat the olive...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3798</th>\n",
       "      <td>[fennel_bulb, butter, half_cream, creme_fraich...</td>\n",
       "      <td>preheat the oven to 400 degrees f . cut the ba...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5684</th>\n",
       "      <td>[egg, milk, garlic_powder, italian_seasoning, ...</td>\n",
       "      <td>whisk eggs , milk , garlic powder , italian se...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4592</th>\n",
       "      <td>[farfalle_pasta, butter, garlic, cream_chicken...</td>\n",
       "      <td>in a large pot with boiling salted water cook ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3507</th>\n",
       "      <td>[calamari_tube, green_onion, garlic, shrimp_me...</td>\n",
       "      <td>preheat the oven to 350 degrees f . rinse the ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4088</th>\n",
       "      <td>[baby_spinach_leaf, basil_leaf, pine_nut, parm...</td>\n",
       "      <td>blend the spinach , basil , pine nuts , parmes...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1889 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            ingredients  \\\n",
       "4635  [angel_hair_pasta, olive_oil, chicken_breast_h...   \n",
       "5257  [purpose_flour, bread_crumb, italian_seasoning...   \n",
       "4782  [beef, onion, garlic, basil, oregano, brown_su...   \n",
       "4891  [veal_scallop, salt_pepper, purpose_flour, but...   \n",
       "5576  [olive_oil, onion, tomato, garlic, tomato_past...   \n",
       "...                                                 ...   \n",
       "3798  [fennel_bulb, butter, half_cream, creme_fraich...   \n",
       "5684  [egg, milk, garlic_powder, italian_seasoning, ...   \n",
       "4592  [farfalle_pasta, butter, garlic, cream_chicken...   \n",
       "3507  [calamari_tube, green_onion, garlic, shrimp_me...   \n",
       "4088  [baby_spinach_leaf, basil_leaf, pine_nut, parm...   \n",
       "\n",
       "                                           Instructions  \n",
       "4635  bring a large pot of lightly salted water to a...  \n",
       "5257  preheat the oven to 350 degrees f . in a plast...  \n",
       "4782  in a skillet over medium heat , brown ground b...  \n",
       "4891  season veal with salt and pepper to taste ; dr...  \n",
       "5576  in a large heavy bottomed pot , heat the olive...  \n",
       "...                                                 ...  \n",
       "3798  preheat the oven to 400 degrees f . cut the ba...  \n",
       "5684  whisk eggs , milk , garlic powder , italian se...  \n",
       "4592  in a large pot with boiling salted water cook ...  \n",
       "3507  preheat the oven to 350 degrees f . rinse the ...  \n",
       "4088  blend the spinach , basil , pine nuts , parmes...  \n",
       "\n",
       "[1889 rows x 2 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9ecc9a8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:19.148760Z",
     "iopub.status.busy": "2024-10-17T09:15:19.147911Z",
     "iopub.status.idle": "2024-10-17T09:15:19.532267Z",
     "shell.execute_reply": "2024-10-17T09:15:19.530998Z"
    },
    "papermill": {
     "duration": 0.409768,
     "end_time": "2024-10-17T09:15:19.535179",
     "exception": false,
     "start_time": "2024-10-17T09:15:19.125411",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tup_list_pref = \"n_\"\n",
    "code_tuple_mapping_in = dict()\n",
    "code_tuple_mapping_it = dict()\n",
    "tuple_code_mapping_in = dict()\n",
    "tuple_code_mapping_it = dict()\n",
    "\n",
    "itr = 0\n",
    "for ind, row in df_in.iterrows():\n",
    "    code_tuple_mapping_in[tup_list_pref+str(itr)+\"_in\"] = row[\"tuple\"]\n",
    "    tuple_code_mapping_in[row[\"tuple\"]] = tup_list_pref+str(itr)+\"_in\"\n",
    "    itr += 1\n",
    "    \n",
    "itr = 0\n",
    "for ind, row in df_it.iterrows():\n",
    "    code_tuple_mapping_it[tup_list_pref+str(itr)+\"_it\"] = row[\"tuple\"]\n",
    "    tuple_code_mapping_it[row[\"tuple\"]] = tup_list_pref+str(itr)+\"_it\"\n",
    "    itr += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c034fbdf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:19.580208Z",
     "iopub.status.busy": "2024-10-17T09:15:19.579744Z",
     "iopub.status.idle": "2024-10-17T09:15:19.588637Z",
     "shell.execute_reply": "2024-10-17T09:15:19.587481Z"
    },
    "papermill": {
     "duration": 0.036692,
     "end_time": "2024-10-17T09:15:19.593116",
     "exception": false,
     "start_time": "2024-10-17T09:15:19.556424",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['n_0_in', 'n_1_in', 'n_2_in', 'n_3_in', 'n_4_in', 'n_5_in', 'n_6_in', 'n_7_in', 'n_8_in', 'n_9_in', 'n_10_in', 'n_11_in', 'n_12_in', 'n_13_in', 'n_14_in', 'n_15_in', 'n_16_in', 'n_17_in', 'n_18_in', 'n_19_in', 'n_20_in', 'n_21_in', 'n_22_in', 'n_23_in', 'n_24_in', 'n_25_in', 'n_26_in', 'n_27_in', 'n_28_in', 'n_29_in', 'n_30_in', 'n_31_in', 'n_32_in', 'n_33_in', 'n_34_in', 'n_35_in', 'n_36_in', 'n_37_in', 'n_38_in', 'n_39_in', 'n_40_in', 'n_41_in', 'n_42_in', 'n_43_in', 'n_44_in', 'n_45_in', 'n_46_in', 'n_47_in', 'n_48_in', 'n_49_in', 'n_50_in', 'n_51_in', 'n_52_in', 'n_53_in', 'n_54_in', 'n_55_in', 'n_56_in', 'n_57_in', 'n_58_in', 'n_59_in', 'n_60_in', 'n_61_in', 'n_62_in', 'n_63_in', 'n_64_in', 'n_65_in', 'n_66_in', 'n_67_in', 'n_68_in', 'n_69_in', 'n_70_in', 'n_71_in', 'n_72_in', 'n_73_in', 'n_74_in', 'n_75_in', 'n_76_in', 'n_77_in', 'n_78_in', 'n_79_in', 'n_80_in', 'n_81_in', 'n_82_in', 'n_83_in', 'n_84_in', 'n_85_in', 'n_86_in', 'n_87_in', 'n_88_in', 'n_89_in', 'n_90_in', 'n_91_in', 'n_92_in', 'n_93_in', 'n_94_in', 'n_95_in', 'n_96_in', 'n_97_in', 'n_98_in', 'n_99_in', 'n_100_in', 'n_101_in', 'n_102_in', 'n_103_in', 'n_104_in', 'n_105_in', 'n_106_in', 'n_107_in', 'n_108_in', 'n_109_in', 'n_110_in', 'n_111_in', 'n_112_in', 'n_113_in', 'n_114_in', 'n_115_in', 'n_116_in', 'n_117_in', 'n_118_in', 'n_119_in', 'n_120_in', 'n_121_in', 'n_122_in', 'n_123_in', 'n_124_in', 'n_125_in', 'n_126_in', 'n_127_in', 'n_128_in', 'n_129_in', 'n_130_in', 'n_131_in', 'n_132_in', 'n_133_in', 'n_134_in', 'n_135_in', 'n_136_in', 'n_137_in', 'n_138_in', 'n_139_in', 'n_140_in', 'n_141_in', 'n_142_in', 'n_143_in', 'n_144_in', 'n_145_in', 'n_146_in', 'n_147_in', 'n_148_in', 'n_149_in', 'n_150_in', 'n_151_in', 'n_152_in', 'n_153_in', 'n_154_in', 'n_155_in', 'n_156_in', 'n_157_in', 'n_158_in', 'n_159_in', 'n_160_in', 'n_161_in', 'n_162_in', 'n_163_in', 'n_164_in', 'n_165_in', 'n_166_in', 'n_167_in', 'n_168_in', 'n_169_in', 'n_170_in', 'n_171_in', 'n_172_in', 'n_173_in', 'n_174_in', 'n_175_in', 'n_176_in', 'n_177_in', 'n_178_in', 'n_179_in', 'n_180_in', 'n_181_in', 'n_182_in', 'n_183_in', 'n_184_in', 'n_185_in', 'n_186_in', 'n_187_in', 'n_188_in', 'n_189_in', 'n_190_in', 'n_191_in', 'n_192_in', 'n_193_in', 'n_194_in', 'n_195_in', 'n_196_in', 'n_197_in', 'n_198_in', 'n_199_in', 'n_200_in', 'n_201_in', 'n_202_in', 'n_203_in', 'n_204_in', 'n_205_in', 'n_206_in', 'n_207_in', 'n_208_in', 'n_209_in', 'n_210_in', 'n_211_in', 'n_212_in', 'n_213_in', 'n_214_in', 'n_215_in', 'n_216_in', 'n_217_in', 'n_218_in', 'n_219_in', 'n_220_in', 'n_221_in', 'n_222_in', 'n_223_in', 'n_224_in', 'n_225_in', 'n_226_in', 'n_227_in', 'n_228_in', 'n_229_in', 'n_230_in', 'n_231_in', 'n_232_in', 'n_233_in', 'n_234_in', 'n_235_in', 'n_236_in', 'n_237_in', 'n_238_in', 'n_239_in', 'n_240_in', 'n_241_in', 'n_242_in', 'n_243_in', 'n_244_in', 'n_245_in', 'n_246_in', 'n_247_in', 'n_248_in', 'n_249_in', 'n_250_in', 'n_251_in', 'n_252_in', 'n_253_in', 'n_254_in', 'n_255_in', 'n_256_in', 'n_257_in', 'n_258_in', 'n_259_in', 'n_260_in', 'n_261_in', 'n_262_in', 'n_263_in', 'n_264_in', 'n_265_in', 'n_266_in', 'n_267_in', 'n_268_in', 'n_269_in', 'n_270_in', 'n_271_in', 'n_272_in', 'n_273_in', 'n_274_in', 'n_275_in', 'n_276_in', 'n_277_in', 'n_278_in', 'n_279_in', 'n_280_in', 'n_281_in', 'n_282_in', 'n_283_in', 'n_284_in', 'n_285_in', 'n_286_in', 'n_287_in', 'n_288_in', 'n_289_in', 'n_290_in', 'n_291_in', 'n_292_in', 'n_293_in', 'n_294_in', 'n_295_in', 'n_296_in', 'n_297_in', 'n_298_in', 'n_299_in', 'n_300_in', 'n_301_in', 'n_302_in', 'n_303_in', 'n_304_in', 'n_305_in', 'n_306_in', 'n_307_in', 'n_308_in', 'n_309_in', 'n_310_in', 'n_311_in', 'n_312_in', 'n_313_in', 'n_314_in', 'n_315_in', 'n_316_in', 'n_317_in', 'n_318_in', 'n_319_in', 'n_320_in', 'n_321_in', 'n_322_in', 'n_323_in', 'n_324_in', 'n_325_in', 'n_326_in', 'n_327_in', 'n_328_in', 'n_329_in', 'n_330_in', 'n_331_in', 'n_332_in', 'n_333_in', 'n_334_in', 'n_335_in', 'n_336_in', 'n_337_in', 'n_338_in', 'n_339_in', 'n_340_in', 'n_341_in', 'n_342_in', 'n_343_in', 'n_344_in', 'n_345_in', 'n_346_in', 'n_347_in', 'n_348_in', 'n_349_in', 'n_350_in', 'n_351_in', 'n_352_in', 'n_353_in', 'n_354_in', 'n_355_in', 'n_356_in', 'n_357_in', 'n_358_in', 'n_359_in', 'n_360_in', 'n_361_in', 'n_362_in', 'n_363_in', 'n_364_in', 'n_365_in', 'n_366_in', 'n_367_in', 'n_368_in', 'n_369_in', 'n_370_in', 'n_371_in', 'n_372_in', 'n_373_in', 'n_374_in', 'n_375_in', 'n_376_in', 'n_377_in', 'n_378_in', 'n_379_in', 'n_380_in', 'n_381_in', 'n_382_in', 'n_383_in', 'n_384_in', 'n_385_in', 'n_386_in', 'n_387_in', 'n_388_in', 'n_389_in', 'n_390_in', 'n_391_in', 'n_392_in', 'n_393_in', 'n_394_in', 'n_395_in', 'n_396_in', 'n_397_in', 'n_398_in', 'n_399_in', 'n_400_in', 'n_401_in', 'n_402_in', 'n_403_in', 'n_404_in', 'n_405_in', 'n_406_in', 'n_407_in', 'n_408_in', 'n_409_in', 'n_410_in', 'n_411_in', 'n_412_in', 'n_413_in', 'n_414_in', 'n_415_in', 'n_416_in', 'n_417_in', 'n_418_in', 'n_419_in', 'n_420_in', 'n_421_in', 'n_422_in', 'n_423_in', 'n_424_in', 'n_425_in', 'n_426_in', 'n_427_in', 'n_428_in', 'n_429_in', 'n_430_in', 'n_431_in', 'n_432_in', 'n_433_in', 'n_434_in', 'n_435_in', 'n_436_in', 'n_437_in', 'n_438_in', 'n_439_in', 'n_440_in', 'n_441_in', 'n_442_in', 'n_443_in', 'n_444_in', 'n_445_in', 'n_446_in', 'n_447_in', 'n_448_in', 'n_449_in', 'n_450_in', 'n_451_in', 'n_452_in', 'n_453_in', 'n_454_in', 'n_455_in', 'n_456_in', 'n_457_in', 'n_458_in', 'n_459_in', 'n_460_in', 'n_461_in', 'n_462_in', 'n_463_in', 'n_464_in', 'n_465_in', 'n_466_in', 'n_467_in', 'n_468_in', 'n_469_in', 'n_470_in', 'n_471_in', 'n_472_in', 'n_473_in', 'n_474_in', 'n_475_in', 'n_476_in', 'n_477_in', 'n_478_in', 'n_479_in', 'n_480_in', 'n_481_in', 'n_482_in', 'n_483_in', 'n_484_in', 'n_485_in', 'n_486_in', 'n_487_in', 'n_488_in', 'n_489_in', 'n_490_in', 'n_491_in', 'n_492_in', 'n_493_in', 'n_494_in', 'n_495_in', 'n_496_in', 'n_497_in', 'n_498_in', 'n_499_in', 'n_500_in', 'n_501_in', 'n_502_in', 'n_503_in', 'n_504_in', 'n_505_in', 'n_506_in', 'n_507_in', 'n_508_in', 'n_509_in', 'n_510_in', 'n_511_in', 'n_512_in', 'n_513_in', 'n_514_in', 'n_515_in', 'n_516_in', 'n_517_in', 'n_518_in', 'n_519_in', 'n_520_in', 'n_521_in', 'n_522_in', 'n_523_in', 'n_524_in', 'n_525_in', 'n_526_in', 'n_527_in', 'n_528_in', 'n_529_in', 'n_530_in', 'n_531_in', 'n_532_in', 'n_533_in', 'n_534_in', 'n_535_in', 'n_536_in', 'n_537_in', 'n_538_in', 'n_539_in', 'n_540_in', 'n_541_in', 'n_542_in', 'n_543_in', 'n_544_in', 'n_545_in', 'n_546_in', 'n_547_in', 'n_548_in', 'n_549_in', 'n_550_in', 'n_551_in', 'n_552_in', 'n_553_in', 'n_554_in', 'n_555_in', 'n_556_in', 'n_557_in', 'n_558_in', 'n_559_in', 'n_560_in', 'n_561_in', 'n_562_in', 'n_563_in', 'n_564_in', 'n_565_in', 'n_566_in', 'n_567_in', 'n_568_in', 'n_569_in', 'n_570_in', 'n_571_in', 'n_572_in', 'n_573_in', 'n_574_in', 'n_575_in', 'n_576_in', 'n_577_in', 'n_578_in', 'n_579_in', 'n_580_in', 'n_581_in', 'n_582_in', 'n_583_in', 'n_584_in', 'n_585_in', 'n_586_in', 'n_587_in', 'n_588_in', 'n_589_in', 'n_590_in', 'n_591_in', 'n_592_in', 'n_593_in', 'n_594_in', 'n_595_in', 'n_596_in', 'n_597_in', 'n_598_in', 'n_599_in', 'n_600_in', 'n_601_in', 'n_602_in', 'n_603_in', 'n_604_in', 'n_605_in', 'n_606_in', 'n_607_in', 'n_608_in', 'n_609_in', 'n_610_in', 'n_611_in', 'n_612_in', 'n_613_in', 'n_614_in', 'n_615_in', 'n_616_in', 'n_617_in', 'n_618_in', 'n_619_in', 'n_620_in', 'n_621_in', 'n_622_in', 'n_623_in', 'n_624_in', 'n_625_in', 'n_626_in', 'n_627_in', 'n_628_in', 'n_629_in', 'n_630_in', 'n_631_in', 'n_632_in', 'n_633_in', 'n_634_in', 'n_635_in', 'n_636_in', 'n_637_in', 'n_638_in', 'n_639_in', 'n_640_in', 'n_641_in', 'n_642_in', 'n_643_in', 'n_644_in', 'n_645_in', 'n_646_in', 'n_647_in', 'n_648_in', 'n_649_in', 'n_650_in', 'n_651_in', 'n_652_in', 'n_653_in', 'n_654_in', 'n_655_in', 'n_656_in', 'n_657_in', 'n_658_in', 'n_659_in', 'n_660_in', 'n_661_in', 'n_662_in', 'n_663_in', 'n_664_in', 'n_665_in', 'n_666_in', 'n_667_in', 'n_668_in', 'n_669_in', 'n_670_in', 'n_671_in', 'n_672_in', 'n_673_in', 'n_674_in', 'n_675_in', 'n_676_in', 'n_677_in', 'n_678_in', 'n_679_in', 'n_680_in', 'n_681_in', 'n_682_in', 'n_683_in', 'n_684_in', 'n_685_in', 'n_686_in', 'n_687_in', 'n_688_in', 'n_689_in', 'n_690_in', 'n_691_in', 'n_692_in', 'n_693_in', 'n_694_in', 'n_695_in', 'n_696_in', 'n_697_in', 'n_698_in', 'n_699_in', 'n_700_in', 'n_701_in', 'n_702_in', 'n_703_in', 'n_704_in', 'n_705_in', 'n_706_in', 'n_707_in', 'n_708_in', 'n_709_in', 'n_710_in', 'n_711_in', 'n_712_in', 'n_713_in', 'n_714_in', 'n_715_in', 'n_716_in', 'n_717_in', 'n_718_in', 'n_719_in', 'n_720_in', 'n_721_in', 'n_722_in', 'n_723_in', 'n_724_in', 'n_725_in', 'n_726_in', 'n_727_in', 'n_728_in', 'n_729_in', 'n_730_in', 'n_731_in', 'n_732_in', 'n_733_in', 'n_734_in', 'n_735_in', 'n_736_in', 'n_737_in', 'n_738_in', 'n_739_in', 'n_740_in', 'n_741_in', 'n_742_in', 'n_743_in', 'n_744_in', 'n_745_in', 'n_746_in', 'n_747_in', 'n_748_in', 'n_749_in', 'n_750_in', 'n_751_in', 'n_752_in', 'n_753_in', 'n_754_in', 'n_755_in', 'n_756_in', 'n_757_in', 'n_758_in', 'n_759_in', 'n_760_in', 'n_761_in', 'n_762_in', 'n_763_in', 'n_764_in', 'n_765_in', 'n_766_in', 'n_767_in', 'n_768_in', 'n_769_in', 'n_770_in', 'n_771_in', 'n_772_in', 'n_773_in', 'n_774_in', 'n_775_in', 'n_776_in', 'n_777_in', 'n_778_in', 'n_779_in', 'n_780_in', 'n_781_in', 'n_782_in', 'n_783_in', 'n_784_in', 'n_785_in', 'n_786_in', 'n_787_in', 'n_788_in', 'n_789_in', 'n_790_in', 'n_791_in', 'n_792_in', 'n_793_in', 'n_794_in', 'n_795_in', 'n_796_in', 'n_797_in', 'n_798_in', 'n_799_in', 'n_800_in', 'n_801_in', 'n_802_in', 'n_803_in', 'n_804_in', 'n_805_in', 'n_806_in', 'n_807_in', 'n_808_in', 'n_809_in', 'n_810_in', 'n_811_in', 'n_812_in', 'n_813_in', 'n_814_in', 'n_815_in', 'n_816_in', 'n_817_in', 'n_818_in', 'n_819_in', 'n_820_in', 'n_821_in', 'n_822_in', 'n_823_in', 'n_824_in', 'n_825_in', 'n_826_in', 'n_827_in', 'n_828_in', 'n_829_in', 'n_830_in', 'n_831_in', 'n_832_in', 'n_833_in', 'n_834_in', 'n_835_in', 'n_836_in', 'n_837_in', 'n_838_in', 'n_839_in', 'n_840_in', 'n_841_in', 'n_842_in', 'n_843_in', 'n_844_in', 'n_845_in', 'n_846_in', 'n_847_in', 'n_848_in', 'n_849_in', 'n_850_in', 'n_851_in', 'n_852_in', 'n_853_in', 'n_854_in', 'n_855_in', 'n_856_in', 'n_857_in', 'n_858_in', 'n_859_in', 'n_860_in', 'n_861_in', 'n_862_in', 'n_863_in', 'n_864_in', 'n_865_in', 'n_866_in', 'n_867_in', 'n_868_in', 'n_869_in', 'n_870_in', 'n_871_in', 'n_872_in', 'n_873_in', 'n_874_in', 'n_875_in', 'n_876_in', 'n_877_in', 'n_878_in', 'n_879_in', 'n_880_in', 'n_881_in', 'n_882_in', 'n_883_in', 'n_884_in', 'n_885_in', 'n_886_in', 'n_887_in', 'n_888_in', 'n_889_in', 'n_890_in', 'n_891_in', 'n_892_in', 'n_893_in', 'n_894_in', 'n_895_in', 'n_896_in', 'n_897_in', 'n_898_in', 'n_899_in', 'n_900_in', 'n_901_in', 'n_902_in', 'n_903_in', 'n_904_in', 'n_905_in', 'n_906_in', 'n_907_in', 'n_908_in', 'n_909_in', 'n_910_in', 'n_911_in', 'n_912_in', 'n_913_in', 'n_914_in', 'n_915_in', 'n_916_in', 'n_917_in', 'n_918_in', 'n_919_in', 'n_920_in', 'n_921_in', 'n_922_in', 'n_923_in', 'n_924_in', 'n_925_in', 'n_926_in', 'n_927_in', 'n_928_in', 'n_929_in', 'n_930_in', 'n_931_in', 'n_932_in', 'n_933_in', 'n_934_in', 'n_935_in', 'n_936_in', 'n_937_in', 'n_938_in', 'n_939_in', 'n_940_in', 'n_941_in', 'n_942_in', 'n_943_in', 'n_944_in', 'n_945_in', 'n_946_in', 'n_947_in', 'n_948_in', 'n_949_in', 'n_950_in', 'n_951_in', 'n_952_in', 'n_953_in', 'n_954_in', 'n_955_in', 'n_956_in', 'n_957_in', 'n_958_in', 'n_959_in', 'n_960_in', 'n_961_in', 'n_962_in', 'n_963_in', 'n_964_in', 'n_965_in', 'n_966_in', 'n_967_in', 'n_968_in', 'n_969_in', 'n_970_in', 'n_971_in', 'n_972_in', 'n_973_in', 'n_974_in', 'n_975_in', 'n_976_in', 'n_977_in', 'n_978_in', 'n_979_in', 'n_980_in', 'n_981_in', 'n_982_in', 'n_983_in', 'n_984_in', 'n_985_in', 'n_986_in', 'n_987_in', 'n_988_in', 'n_989_in', 'n_990_in', 'n_991_in', 'n_992_in', 'n_993_in', 'n_994_in', 'n_995_in', 'n_996_in', 'n_997_in', 'n_998_in', 'n_999_in', 'n_1000_in', 'n_1001_in', 'n_1002_in', 'n_1003_in', 'n_1004_in', 'n_1005_in', 'n_1006_in', 'n_1007_in', 'n_1008_in', 'n_1009_in', 'n_1010_in', 'n_1011_in', 'n_1012_in', 'n_1013_in', 'n_1014_in', 'n_1015_in', 'n_1016_in', 'n_1017_in', 'n_1018_in', 'n_1019_in', 'n_1020_in', 'n_1021_in', 'n_1022_in', 'n_1023_in', 'n_1024_in', 'n_1025_in', 'n_1026_in', 'n_1027_in', 'n_1028_in', 'n_1029_in', 'n_1030_in', 'n_1031_in', 'n_1032_in', 'n_1033_in', 'n_1034_in', 'n_1035_in', 'n_1036_in', 'n_1037_in', 'n_1038_in', 'n_1039_in', 'n_1040_in', 'n_1041_in', 'n_1042_in', 'n_1043_in', 'n_1044_in', 'n_1045_in', 'n_1046_in', 'n_1047_in', 'n_1048_in', 'n_1049_in', 'n_1050_in', 'n_1051_in', 'n_1052_in', 'n_1053_in', 'n_1054_in', 'n_1055_in', 'n_1056_in', 'n_1057_in', 'n_1058_in', 'n_1059_in', 'n_1060_in', 'n_1061_in', 'n_1062_in', 'n_1063_in', 'n_1064_in', 'n_1065_in', 'n_1066_in', 'n_1067_in', 'n_1068_in', 'n_1069_in', 'n_1070_in', 'n_1071_in', 'n_1072_in', 'n_1073_in', 'n_1074_in', 'n_1075_in', 'n_1076_in', 'n_1077_in', 'n_1078_in', 'n_1079_in', 'n_1080_in', 'n_1081_in', 'n_1082_in', 'n_1083_in', 'n_1084_in', 'n_1085_in', 'n_1086_in', 'n_1087_in', 'n_1088_in', 'n_1089_in', 'n_1090_in', 'n_1091_in', 'n_1092_in', 'n_1093_in', 'n_1094_in', 'n_1095_in', 'n_1096_in', 'n_1097_in', 'n_1098_in', 'n_1099_in', 'n_1100_in', 'n_1101_in', 'n_1102_in', 'n_1103_in', 'n_1104_in', 'n_1105_in', 'n_1106_in', 'n_1107_in', 'n_1108_in', 'n_1109_in', 'n_1110_in', 'n_1111_in', 'n_1112_in', 'n_1113_in', 'n_1114_in', 'n_1115_in', 'n_1116_in', 'n_1117_in', 'n_1118_in', 'n_1119_in', 'n_1120_in', 'n_1121_in', 'n_1122_in', 'n_1123_in', 'n_1124_in', 'n_1125_in', 'n_1126_in', 'n_1127_in', 'n_1128_in', 'n_1129_in', 'n_1130_in', 'n_1131_in', 'n_1132_in', 'n_1133_in', 'n_1134_in', 'n_1135_in', 'n_1136_in', 'n_1137_in', 'n_1138_in', 'n_1139_in', 'n_1140_in', 'n_1141_in', 'n_1142_in', 'n_1143_in', 'n_1144_in', 'n_1145_in', 'n_1146_in', 'n_1147_in', 'n_1148_in', 'n_1149_in', 'n_1150_in', 'n_1151_in', 'n_1152_in', 'n_1153_in', 'n_1154_in', 'n_1155_in', 'n_1156_in', 'n_1157_in', 'n_1158_in', 'n_1159_in', 'n_1160_in', 'n_1161_in', 'n_1162_in', 'n_1163_in', 'n_1164_in', 'n_1165_in', 'n_1166_in', 'n_1167_in', 'n_1168_in', 'n_1169_in', 'n_1170_in', 'n_1171_in', 'n_1172_in', 'n_1173_in', 'n_1174_in', 'n_1175_in', 'n_1176_in', 'n_1177_in', 'n_1178_in', 'n_1179_in', 'n_1180_in', 'n_1181_in', 'n_1182_in', 'n_1183_in', 'n_1184_in', 'n_1185_in', 'n_1186_in', 'n_1187_in', 'n_1188_in', 'n_1189_in', 'n_1190_in', 'n_1191_in', 'n_1192_in', 'n_1193_in', 'n_1194_in', 'n_1195_in', 'n_1196_in', 'n_1197_in', 'n_1198_in', 'n_1199_in', 'n_1200_in', 'n_1201_in', 'n_1202_in', 'n_1203_in', 'n_1204_in', 'n_1205_in', 'n_1206_in', 'n_1207_in', 'n_1208_in', 'n_1209_in', 'n_1210_in', 'n_1211_in', 'n_1212_in', 'n_1213_in', 'n_1214_in', 'n_1215_in', 'n_1216_in', 'n_1217_in', 'n_1218_in', 'n_1219_in', 'n_1220_in', 'n_1221_in', 'n_1222_in', 'n_1223_in', 'n_1224_in', 'n_1225_in', 'n_1226_in', 'n_1227_in', 'n_1228_in', 'n_1229_in', 'n_1230_in', 'n_1231_in', 'n_1232_in', 'n_1233_in', 'n_1234_in', 'n_1235_in', 'n_1236_in', 'n_1237_in', 'n_1238_in', 'n_1239_in', 'n_1240_in', 'n_1241_in', 'n_1242_in', 'n_1243_in', 'n_1244_in', 'n_1245_in', 'n_1246_in', 'n_1247_in', 'n_1248_in', 'n_1249_in', 'n_1250_in', 'n_1251_in', 'n_1252_in', 'n_1253_in', 'n_1254_in', 'n_1255_in', 'n_1256_in', 'n_1257_in', 'n_1258_in', 'n_1259_in', 'n_1260_in', 'n_1261_in', 'n_1262_in', 'n_1263_in', 'n_1264_in', 'n_1265_in', 'n_1266_in', 'n_1267_in', 'n_1268_in', 'n_1269_in', 'n_1270_in', 'n_1271_in', 'n_1272_in', 'n_1273_in', 'n_1274_in', 'n_1275_in', 'n_1276_in', 'n_1277_in', 'n_1278_in', 'n_1279_in', 'n_1280_in', 'n_1281_in', 'n_1282_in', 'n_1283_in', 'n_1284_in', 'n_1285_in', 'n_1286_in', 'n_1287_in', 'n_1288_in', 'n_1289_in', 'n_1290_in', 'n_1291_in', 'n_1292_in', 'n_1293_in', 'n_1294_in', 'n_1295_in', 'n_1296_in', 'n_1297_in', 'n_1298_in', 'n_1299_in', 'n_1300_in', 'n_1301_in', 'n_1302_in', 'n_1303_in', 'n_1304_in', 'n_1305_in', 'n_1306_in', 'n_1307_in', 'n_1308_in', 'n_1309_in', 'n_1310_in', 'n_1311_in', 'n_1312_in', 'n_1313_in', 'n_1314_in', 'n_1315_in', 'n_1316_in', 'n_1317_in', 'n_1318_in', 'n_1319_in', 'n_1320_in', 'n_1321_in', 'n_1322_in', 'n_1323_in', 'n_1324_in', 'n_1325_in', 'n_1326_in', 'n_1327_in', 'n_1328_in', 'n_1329_in', 'n_1330_in', 'n_1331_in', 'n_1332_in', 'n_1333_in', 'n_1334_in', 'n_1335_in', 'n_1336_in', 'n_1337_in', 'n_1338_in', 'n_1339_in', 'n_1340_in', 'n_1341_in', 'n_1342_in', 'n_1343_in', 'n_1344_in', 'n_1345_in', 'n_1346_in', 'n_1347_in', 'n_1348_in', 'n_1349_in', 'n_1350_in', 'n_1351_in', 'n_1352_in', 'n_1353_in', 'n_1354_in', 'n_1355_in', 'n_1356_in', 'n_1357_in', 'n_1358_in', 'n_1359_in', 'n_1360_in', 'n_1361_in', 'n_1362_in', 'n_1363_in', 'n_1364_in', 'n_1365_in', 'n_1366_in', 'n_1367_in', 'n_1368_in', 'n_1369_in', 'n_1370_in', 'n_1371_in', 'n_1372_in', 'n_1373_in', 'n_1374_in', 'n_1375_in', 'n_1376_in', 'n_1377_in', 'n_1378_in', 'n_1379_in', 'n_1380_in', 'n_1381_in', 'n_1382_in', 'n_1383_in', 'n_1384_in', 'n_1385_in', 'n_1386_in', 'n_1387_in', 'n_1388_in', 'n_1389_in', 'n_1390_in', 'n_1391_in', 'n_1392_in', 'n_1393_in', 'n_1394_in', 'n_1395_in', 'n_1396_in', 'n_1397_in', 'n_1398_in', 'n_1399_in', 'n_1400_in', 'n_1401_in', 'n_1402_in', 'n_1403_in', 'n_1404_in', 'n_1405_in', 'n_1406_in', 'n_1407_in', 'n_1408_in', 'n_1409_in', 'n_1410_in', 'n_1411_in', 'n_1412_in', 'n_1413_in', 'n_1414_in', 'n_1415_in', 'n_1416_in', 'n_1417_in', 'n_1418_in', 'n_1419_in', 'n_1420_in', 'n_1421_in', 'n_1422_in', 'n_1423_in', 'n_1424_in', 'n_1425_in', 'n_1426_in', 'n_1427_in', 'n_1428_in', 'n_1429_in', 'n_1430_in', 'n_1431_in', 'n_1432_in', 'n_1433_in', 'n_1434_in', 'n_1435_in', 'n_1436_in', 'n_1437_in', 'n_1438_in', 'n_1439_in', 'n_1440_in', 'n_1441_in', 'n_1442_in', 'n_1443_in', 'n_1444_in', 'n_1445_in', 'n_1446_in', 'n_1447_in', 'n_1448_in', 'n_1449_in', 'n_1450_in', 'n_1451_in', 'n_1452_in', 'n_1453_in', 'n_1454_in', 'n_1455_in', 'n_1456_in', 'n_1457_in', 'n_1458_in', 'n_1459_in', 'n_1460_in', 'n_1461_in', 'n_1462_in', 'n_1463_in', 'n_1464_in', 'n_1465_in', 'n_1466_in', 'n_1467_in', 'n_1468_in', 'n_1469_in', 'n_1470_in', 'n_1471_in', 'n_1472_in', 'n_1473_in', 'n_1474_in', 'n_1475_in', 'n_1476_in', 'n_1477_in', 'n_1478_in', 'n_1479_in', 'n_1480_in', 'n_1481_in', 'n_1482_in', 'n_1483_in', 'n_1484_in', 'n_1485_in', 'n_1486_in', 'n_1487_in', 'n_1488_in', 'n_1489_in', 'n_1490_in', 'n_1491_in', 'n_1492_in', 'n_1493_in', 'n_1494_in', 'n_1495_in', 'n_1496_in', 'n_1497_in', 'n_1498_in', 'n_1499_in', 'n_1500_in', 'n_1501_in', 'n_1502_in', 'n_1503_in', 'n_1504_in', 'n_1505_in', 'n_1506_in', 'n_1507_in', 'n_1508_in', 'n_1509_in', 'n_1510_in', 'n_1511_in', 'n_1512_in', 'n_1513_in', 'n_1514_in', 'n_1515_in', 'n_1516_in', 'n_1517_in', 'n_1518_in', 'n_1519_in', 'n_1520_in', 'n_1521_in', 'n_1522_in', 'n_1523_in', 'n_1524_in', 'n_1525_in', 'n_1526_in', 'n_1527_in', 'n_1528_in', 'n_1529_in', 'n_1530_in', 'n_1531_in', 'n_1532_in', 'n_1533_in', 'n_1534_in', 'n_1535_in', 'n_1536_in', 'n_1537_in', 'n_1538_in', 'n_1539_in', 'n_1540_in', 'n_1541_in', 'n_1542_in', 'n_1543_in', 'n_1544_in', 'n_1545_in', 'n_1546_in', 'n_1547_in', 'n_1548_in', 'n_1549_in', 'n_1550_in', 'n_1551_in', 'n_1552_in', 'n_1553_in', 'n_1554_in', 'n_1555_in', 'n_1556_in', 'n_1557_in', 'n_1558_in', 'n_1559_in', 'n_1560_in', 'n_1561_in', 'n_1562_in', 'n_1563_in', 'n_1564_in', 'n_1565_in', 'n_1566_in', 'n_1567_in', 'n_1568_in', 'n_1569_in', 'n_1570_in', 'n_1571_in', 'n_1572_in', 'n_1573_in', 'n_1574_in', 'n_1575_in', 'n_1576_in', 'n_1577_in', 'n_1578_in', 'n_1579_in', 'n_1580_in', 'n_1581_in', 'n_1582_in', 'n_1583_in', 'n_1584_in', 'n_1585_in', 'n_1586_in', 'n_1587_in', 'n_1588_in', 'n_1589_in', 'n_1590_in', 'n_1591_in', 'n_1592_in', 'n_1593_in', 'n_1594_in', 'n_1595_in', 'n_1596_in', 'n_1597_in', 'n_1598_in', 'n_1599_in', 'n_1600_in', 'n_1601_in', 'n_1602_in', 'n_1603_in', 'n_1604_in', 'n_1605_in', 'n_1606_in', 'n_1607_in', 'n_1608_in', 'n_1609_in', 'n_1610_in', 'n_1611_in', 'n_1612_in', 'n_1613_in', 'n_1614_in', 'n_1615_in', 'n_1616_in', 'n_1617_in', 'n_1618_in', 'n_1619_in', 'n_1620_in', 'n_1621_in', 'n_1622_in', 'n_1623_in', 'n_1624_in', 'n_1625_in', 'n_1626_in', 'n_1627_in', 'n_1628_in', 'n_1629_in', 'n_1630_in', 'n_1631_in', 'n_1632_in', 'n_1633_in', 'n_1634_in', 'n_1635_in', 'n_1636_in', 'n_1637_in', 'n_1638_in', 'n_1639_in', 'n_1640_in', 'n_1641_in', 'n_1642_in', 'n_1643_in', 'n_1644_in', 'n_1645_in', 'n_1646_in', 'n_1647_in', 'n_1648_in', 'n_1649_in', 'n_1650_in', 'n_1651_in', 'n_1652_in', 'n_1653_in', 'n_1654_in', 'n_1655_in', 'n_1656_in', 'n_1657_in', 'n_1658_in', 'n_1659_in', 'n_1660_in', 'n_1661_in', 'n_1662_in', 'n_1663_in', 'n_1664_in', 'n_1665_in', 'n_1666_in', 'n_1667_in', 'n_1668_in', 'n_1669_in', 'n_1670_in', 'n_1671_in', 'n_1672_in', 'n_1673_in', 'n_1674_in', 'n_1675_in', 'n_1676_in', 'n_1677_in', 'n_1678_in', 'n_1679_in', 'n_1680_in', 'n_1681_in', 'n_1682_in', 'n_1683_in', 'n_1684_in', 'n_1685_in', 'n_1686_in', 'n_1687_in', 'n_1688_in', 'n_1689_in', 'n_1690_in', 'n_1691_in', 'n_1692_in', 'n_1693_in', 'n_1694_in', 'n_1695_in', 'n_1696_in', 'n_1697_in', 'n_1698_in', 'n_1699_in', 'n_1700_in', 'n_1701_in', 'n_1702_in', 'n_1703_in', 'n_1704_in', 'n_1705_in', 'n_1706_in', 'n_1707_in', 'n_1708_in', 'n_1709_in', 'n_1710_in', 'n_1711_in', 'n_1712_in', 'n_1713_in', 'n_1714_in', 'n_1715_in', 'n_1716_in', 'n_1717_in', 'n_1718_in', 'n_1719_in', 'n_1720_in', 'n_1721_in', 'n_1722_in', 'n_1723_in', 'n_1724_in', 'n_1725_in', 'n_1726_in', 'n_1727_in', 'n_1728_in', 'n_1729_in', 'n_1730_in', 'n_1731_in', 'n_1732_in', 'n_1733_in', 'n_1734_in', 'n_1735_in', 'n_1736_in', 'n_1737_in', 'n_1738_in', 'n_1739_in', 'n_1740_in', 'n_1741_in', 'n_1742_in', 'n_1743_in', 'n_1744_in', 'n_1745_in', 'n_1746_in', 'n_1747_in', 'n_1748_in', 'n_1749_in', 'n_1750_in', 'n_1751_in', 'n_1752_in', 'n_1753_in', 'n_1754_in', 'n_1755_in', 'n_1756_in', 'n_1757_in', 'n_1758_in', 'n_1759_in', 'n_1760_in', 'n_1761_in', 'n_1762_in', 'n_1763_in', 'n_1764_in', 'n_1765_in', 'n_1766_in', 'n_1767_in', 'n_1768_in', 'n_1769_in', 'n_1770_in', 'n_1771_in', 'n_1772_in', 'n_1773_in', 'n_1774_in', 'n_1775_in', 'n_1776_in', 'n_1777_in', 'n_1778_in', 'n_1779_in', 'n_1780_in', 'n_1781_in', 'n_1782_in', 'n_1783_in', 'n_1784_in', 'n_1785_in', 'n_1786_in', 'n_1787_in', 'n_1788_in', 'n_1789_in', 'n_1790_in', 'n_1791_in', 'n_1792_in', 'n_1793_in', 'n_1794_in', 'n_1795_in', 'n_1796_in', 'n_1797_in', 'n_1798_in', 'n_1799_in', 'n_1800_in', 'n_1801_in', 'n_1802_in', 'n_1803_in', 'n_1804_in', 'n_1805_in', 'n_1806_in', 'n_1807_in', 'n_1808_in', 'n_1809_in', 'n_1810_in', 'n_1811_in', 'n_1812_in', 'n_1813_in', 'n_1814_in', 'n_1815_in', 'n_1816_in', 'n_1817_in', 'n_1818_in', 'n_1819_in', 'n_1820_in', 'n_1821_in', 'n_1822_in', 'n_1823_in', 'n_1824_in', 'n_1825_in', 'n_1826_in', 'n_1827_in', 'n_1828_in', 'n_1829_in', 'n_1830_in', 'n_1831_in', 'n_1832_in', 'n_1833_in', 'n_1834_in', 'n_1835_in', 'n_1836_in', 'n_1837_in', 'n_1838_in', 'n_1839_in', 'n_1840_in', 'n_1841_in', 'n_1842_in', 'n_1843_in', 'n_1844_in', 'n_1845_in', 'n_1846_in', 'n_1847_in', 'n_1848_in', 'n_1849_in', 'n_1850_in', 'n_1851_in', 'n_1852_in', 'n_1853_in', 'n_1854_in', 'n_1855_in', 'n_1856_in', 'n_1857_in', 'n_1858_in', 'n_1859_in', 'n_1860_in', 'n_1861_in', 'n_1862_in', 'n_1863_in', 'n_1864_in', 'n_1865_in', 'n_1866_in', 'n_1867_in', 'n_1868_in', 'n_1869_in', 'n_1870_in', 'n_1871_in', 'n_1872_in', 'n_1873_in', 'n_1874_in', 'n_1875_in', 'n_1876_in', 'n_1877_in', 'n_1878_in', 'n_1879_in', 'n_1880_in', 'n_1881_in', 'n_1882_in', 'n_1883_in', 'n_1884_in', 'n_1885_in', 'n_1886_in', 'n_1887_in', 'n_1888_in', 'n_1889_in', 'n_1890_in', 'n_1891_in', 'n_1892_in', 'n_1893_in', 'n_1894_in', 'n_1895_in', 'n_1896_in', 'n_1897_in', 'n_1898_in', 'n_1899_in', 'n_1900_in', 'n_1901_in', 'n_1902_in', 'n_1903_in', 'n_1904_in', 'n_1905_in', 'n_1906_in', 'n_1907_in', 'n_1908_in', 'n_1909_in', 'n_1910_in', 'n_1911_in', 'n_1912_in', 'n_1913_in', 'n_1914_in', 'n_1915_in', 'n_1916_in', 'n_1917_in', 'n_1918_in', 'n_1919_in', 'n_1920_in', 'n_1921_in', 'n_1922_in', 'n_1923_in', 'n_1924_in', 'n_1925_in', 'n_1926_in', 'n_1927_in', 'n_1928_in', 'n_1929_in', 'n_1930_in', 'n_1931_in', 'n_1932_in', 'n_1933_in', 'n_1934_in', 'n_1935_in', 'n_1936_in', 'n_1937_in', 'n_1938_in', 'n_1939_in', 'n_1940_in', 'n_1941_in', 'n_1942_in', 'n_1943_in', 'n_1944_in', 'n_1945_in', 'n_1946_in', 'n_1947_in', 'n_1948_in', 'n_1949_in', 'n_1950_in', 'n_1951_in', 'n_1952_in', 'n_1953_in', 'n_1954_in', 'n_1955_in', 'n_1956_in', 'n_1957_in', 'n_1958_in', 'n_1959_in', 'n_1960_in', 'n_1961_in', 'n_1962_in', 'n_1963_in', 'n_1964_in', 'n_1965_in', 'n_1966_in', 'n_1967_in', 'n_1968_in', 'n_1969_in', 'n_1970_in', 'n_1971_in', 'n_1972_in', 'n_1973_in', 'n_1974_in', 'n_1975_in', 'n_1976_in', 'n_1977_in', 'n_1978_in', 'n_1979_in', 'n_1980_in', 'n_1981_in', 'n_1982_in', 'n_1983_in', 'n_1984_in', 'n_1985_in', 'n_1986_in', 'n_1987_in', 'n_1988_in', 'n_1989_in', 'n_1990_in', 'n_1991_in', 'n_1992_in', 'n_1993_in', 'n_1994_in', 'n_1995_in', 'n_1996_in', 'n_1997_in', 'n_1998_in', 'n_1999_in', 'n_2000_in', 'n_2001_in', 'n_2002_in', 'n_2003_in', 'n_2004_in', 'n_2005_in', 'n_2006_in', 'n_2007_in', 'n_2008_in', 'n_2009_in', 'n_2010_in', 'n_2011_in', 'n_2012_in', 'n_2013_in', 'n_2014_in', 'n_2015_in', 'n_2016_in', 'n_2017_in', 'n_2018_in', 'n_2019_in', 'n_2020_in', 'n_2021_in', 'n_2022_in', 'n_2023_in', 'n_2024_in', 'n_2025_in', 'n_2026_in', 'n_2027_in', 'n_2028_in', 'n_2029_in', 'n_2030_in', 'n_2031_in', 'n_2032_in', 'n_2033_in', 'n_2034_in', 'n_2035_in', 'n_2036_in', 'n_2037_in', 'n_2038_in', 'n_2039_in', 'n_2040_in', 'n_2041_in', 'n_2042_in', 'n_2043_in', 'n_2044_in', 'n_2045_in', 'n_2046_in', 'n_2047_in', 'n_2048_in', 'n_2049_in', 'n_2050_in', 'n_2051_in', 'n_2052_in', 'n_2053_in', 'n_2054_in', 'n_2055_in', 'n_2056_in', 'n_2057_in', 'n_2058_in', 'n_2059_in', 'n_2060_in', 'n_2061_in', 'n_2062_in', 'n_2063_in', 'n_2064_in', 'n_2065_in', 'n_2066_in', 'n_2067_in', 'n_2068_in', 'n_2069_in', 'n_2070_in', 'n_2071_in', 'n_2072_in', 'n_2073_in', 'n_2074_in', 'n_2075_in', 'n_2076_in', 'n_2077_in', 'n_2078_in', 'n_2079_in', 'n_2080_in', 'n_2081_in', 'n_2082_in', 'n_2083_in', 'n_2084_in', 'n_2085_in', 'n_2086_in', 'n_2087_in', 'n_2088_in', 'n_2089_in', 'n_2090_in', 'n_2091_in', 'n_2092_in', 'n_2093_in', 'n_2094_in', 'n_2095_in', 'n_2096_in', 'n_2097_in', 'n_2098_in', 'n_2099_in', 'n_2100_in', 'n_2101_in', 'n_2102_in', 'n_2103_in', 'n_2104_in', 'n_2105_in', 'n_2106_in', 'n_2107_in', 'n_2108_in', 'n_2109_in', 'n_2110_in', 'n_2111_in', 'n_2112_in', 'n_2113_in', 'n_2114_in', 'n_2115_in', 'n_2116_in', 'n_2117_in', 'n_2118_in', 'n_2119_in', 'n_2120_in', 'n_2121_in', 'n_2122_in', 'n_2123_in', 'n_2124_in', 'n_2125_in', 'n_2126_in', 'n_2127_in', 'n_2128_in', 'n_2129_in', 'n_2130_in', 'n_2131_in', 'n_2132_in', 'n_2133_in', 'n_2134_in', 'n_2135_in', 'n_2136_in', 'n_2137_in', 'n_2138_in', 'n_2139_in', 'n_2140_in', 'n_2141_in', 'n_2142_in', 'n_2143_in', 'n_2144_in', 'n_2145_in', 'n_2146_in', 'n_2147_in', 'n_2148_in', 'n_2149_in', 'n_2150_in', 'n_2151_in', 'n_2152_in', 'n_2153_in', 'n_2154_in', 'n_2155_in', 'n_2156_in', 'n_2157_in', 'n_2158_in', 'n_2159_in', 'n_2160_in', 'n_2161_in', 'n_2162_in', 'n_2163_in', 'n_2164_in', 'n_2165_in', 'n_2166_in', 'n_2167_in', 'n_2168_in', 'n_2169_in', 'n_2170_in', 'n_2171_in', 'n_2172_in', 'n_2173_in', 'n_2174_in', 'n_2175_in', 'n_2176_in', 'n_2177_in', 'n_2178_in', 'n_2179_in', 'n_2180_in', 'n_2181_in', 'n_2182_in', 'n_2183_in', 'n_2184_in', 'n_2185_in', 'n_2186_in', 'n_2187_in', 'n_2188_in', 'n_2189_in', 'n_2190_in', 'n_2191_in', 'n_2192_in', 'n_2193_in', 'n_2194_in', 'n_2195_in', 'n_2196_in', 'n_2197_in', 'n_2198_in', 'n_2199_in', 'n_2200_in', 'n_2201_in', 'n_2202_in', 'n_2203_in', 'n_2204_in', 'n_2205_in', 'n_2206_in', 'n_2207_in', 'n_2208_in', 'n_2209_in', 'n_2210_in', 'n_2211_in', 'n_2212_in', 'n_2213_in', 'n_2214_in', 'n_2215_in', 'n_2216_in', 'n_2217_in', 'n_2218_in', 'n_2219_in', 'n_2220_in', 'n_2221_in', 'n_2222_in', 'n_2223_in', 'n_2224_in', 'n_2225_in', 'n_2226_in', 'n_2227_in', 'n_2228_in', 'n_2229_in', 'n_2230_in', 'n_2231_in', 'n_2232_in', 'n_2233_in', 'n_2234_in', 'n_2235_in', 'n_2236_in', 'n_2237_in', 'n_2238_in', 'n_2239_in', 'n_2240_in', 'n_2241_in', 'n_2242_in', 'n_2243_in', 'n_2244_in', 'n_2245_in', 'n_2246_in', 'n_2247_in', 'n_2248_in', 'n_2249_in', 'n_2250_in', 'n_2251_in', 'n_2252_in', 'n_2253_in', 'n_2254_in', 'n_2255_in', 'n_2256_in', 'n_2257_in', 'n_2258_in', 'n_2259_in', 'n_2260_in', 'n_2261_in', 'n_2262_in', 'n_2263_in', 'n_2264_in', 'n_2265_in', 'n_2266_in', 'n_2267_in', 'n_2268_in', 'n_2269_in', 'n_2270_in', 'n_2271_in', 'n_2272_in', 'n_2273_in', 'n_2274_in', 'n_2275_in', 'n_2276_in', 'n_2277_in', 'n_2278_in', 'n_2279_in', 'n_2280_in', 'n_2281_in', 'n_2282_in', 'n_2283_in', 'n_2284_in', 'n_2285_in', 'n_2286_in', 'n_2287_in', 'n_2288_in', 'n_2289_in', 'n_2290_in', 'n_2291_in', 'n_2292_in', 'n_2293_in', 'n_2294_in', 'n_2295_in', 'n_2296_in', 'n_2297_in', 'n_2298_in', 'n_2299_in', 'n_2300_in', 'n_2301_in', 'n_2302_in', 'n_2303_in', 'n_2304_in', 'n_2305_in', 'n_2306_in', 'n_2307_in', 'n_2308_in', 'n_2309_in', 'n_2310_in', 'n_2311_in', 'n_2312_in', 'n_2313_in', 'n_2314_in', 'n_2315_in', 'n_2316_in', 'n_2317_in', 'n_2318_in', 'n_2319_in', 'n_2320_in', 'n_2321_in', 'n_2322_in', 'n_2323_in', 'n_2324_in', 'n_2325_in', 'n_2326_in', 'n_2327_in', 'n_2328_in', 'n_2329_in', 'n_2330_in', 'n_2331_in', 'n_2332_in', 'n_2333_in', 'n_2334_in', 'n_2335_in', 'n_2336_in', 'n_2337_in', 'n_2338_in', 'n_2339_in', 'n_2340_in', 'n_2341_in', 'n_2342_in', 'n_2343_in', 'n_2344_in', 'n_2345_in', 'n_2346_in', 'n_2347_in', 'n_2348_in', 'n_2349_in', 'n_2350_in', 'n_2351_in', 'n_2352_in', 'n_2353_in', 'n_2354_in', 'n_2355_in', 'n_2356_in', 'n_2357_in', 'n_2358_in', 'n_2359_in', 'n_2360_in', 'n_2361_in', 'n_2362_in', 'n_2363_in', 'n_2364_in', 'n_2365_in', 'n_2366_in', 'n_2367_in', 'n_2368_in', 'n_2369_in', 'n_2370_in', 'n_2371_in', 'n_2372_in', 'n_2373_in', 'n_2374_in', 'n_2375_in', 'n_2376_in', 'n_2377_in', 'n_2378_in', 'n_2379_in', 'n_2380_in', 'n_2381_in', 'n_2382_in', 'n_2383_in', 'n_2384_in', 'n_2385_in', 'n_2386_in', 'n_2387_in', 'n_2388_in', 'n_2389_in', 'n_2390_in', 'n_2391_in', 'n_2392_in', 'n_2393_in', 'n_2394_in', 'n_2395_in', 'n_2396_in', 'n_2397_in', 'n_2398_in', 'n_2399_in', 'n_2400_in', 'n_2401_in', 'n_2402_in', 'n_2403_in', 'n_2404_in', 'n_2405_in', 'n_2406_in', 'n_2407_in', 'n_2408_in', 'n_2409_in', 'n_2410_in', 'n_2411_in', 'n_2412_in', 'n_2413_in', 'n_2414_in', 'n_2415_in', 'n_2416_in', 'n_2417_in', 'n_2418_in', 'n_2419_in', 'n_2420_in', 'n_2421_in', 'n_2422_in', 'n_2423_in', 'n_2424_in', 'n_2425_in', 'n_2426_in', 'n_2427_in', 'n_2428_in', 'n_2429_in', 'n_2430_in', 'n_2431_in', 'n_2432_in', 'n_2433_in', 'n_2434_in', 'n_2435_in', 'n_2436_in', 'n_2437_in', 'n_2438_in', 'n_2439_in', 'n_2440_in', 'n_2441_in', 'n_2442_in', 'n_2443_in', 'n_2444_in', 'n_2445_in', 'n_2446_in', 'n_2447_in', 'n_2448_in', 'n_2449_in', 'n_2450_in', 'n_2451_in', 'n_2452_in', 'n_2453_in', 'n_2454_in', 'n_2455_in', 'n_2456_in', 'n_2457_in', 'n_2458_in', 'n_2459_in', 'n_2460_in', 'n_2461_in', 'n_2462_in', 'n_2463_in', 'n_2464_in', 'n_2465_in', 'n_2466_in', 'n_2467_in', 'n_2468_in', 'n_2469_in', 'n_2470_in', 'n_2471_in', 'n_2472_in', 'n_2473_in', 'n_2474_in', 'n_2475_in', 'n_2476_in', 'n_2477_in', 'n_2478_in', 'n_2479_in', 'n_2480_in', 'n_2481_in', 'n_2482_in', 'n_2483_in', 'n_2484_in', 'n_2485_in', 'n_2486_in', 'n_2487_in', 'n_2488_in', 'n_2489_in', 'n_2490_in', 'n_2491_in', 'n_2492_in', 'n_2493_in', 'n_2494_in', 'n_2495_in', 'n_2496_in', 'n_2497_in', 'n_2498_in', 'n_2499_in', 'n_2500_in', 'n_2501_in', 'n_2502_in', 'n_2503_in', 'n_2504_in', 'n_2505_in', 'n_2506_in', 'n_2507_in', 'n_2508_in', 'n_2509_in', 'n_2510_in', 'n_2511_in', 'n_2512_in', 'n_2513_in', 'n_2514_in', 'n_2515_in', 'n_2516_in', 'n_2517_in', 'n_2518_in', 'n_2519_in', 'n_2520_in', 'n_2521_in', 'n_2522_in', 'n_2523_in', 'n_2524_in', 'n_2525_in', 'n_2526_in', 'n_2527_in', 'n_2528_in', 'n_2529_in', 'n_2530_in', 'n_2531_in', 'n_2532_in', 'n_2533_in', 'n_2534_in', 'n_2535_in', 'n_2536_in', 'n_2537_in', 'n_2538_in', 'n_2539_in', 'n_2540_in', 'n_2541_in', 'n_2542_in', 'n_2543_in', 'n_2544_in', 'n_2545_in', 'n_2546_in', 'n_2547_in', 'n_2548_in', 'n_2549_in', 'n_2550_in', 'n_2551_in', 'n_2552_in', 'n_2553_in', 'n_2554_in', 'n_2555_in', 'n_2556_in', 'n_2557_in', 'n_2558_in', 'n_2559_in', 'n_2560_in', 'n_2561_in', 'n_2562_in', 'n_2563_in', 'n_2564_in', 'n_2565_in', 'n_2566_in', 'n_2567_in', 'n_2568_in', 'n_2569_in', 'n_2570_in', 'n_2571_in', 'n_2572_in', 'n_2573_in', 'n_2574_in', 'n_2575_in', 'n_2576_in', 'n_2577_in', 'n_2578_in', 'n_2579_in', 'n_2580_in', 'n_2581_in', 'n_2582_in', 'n_2583_in', 'n_2584_in', 'n_2585_in', 'n_2586_in', 'n_2587_in', 'n_2588_in', 'n_2589_in', 'n_2590_in', 'n_2591_in', 'n_2592_in', 'n_2593_in', 'n_2594_in', 'n_2595_in', 'n_2596_in', 'n_2597_in', 'n_2598_in', 'n_2599_in', 'n_2600_in', 'n_2601_in', 'n_2602_in', 'n_2603_in', 'n_2604_in', 'n_2605_in', 'n_2606_in', 'n_2607_in', 'n_2608_in', 'n_2609_in', 'n_2610_in', 'n_2611_in', 'n_2612_in', 'n_2613_in', 'n_2614_in', 'n_2615_in', 'n_2616_in', 'n_2617_in', 'n_2618_in', 'n_2619_in', 'n_2620_in', 'n_2621_in', 'n_2622_in', 'n_2623_in', 'n_2624_in', 'n_2625_in', 'n_2626_in', 'n_2627_in', 'n_2628_in', 'n_2629_in', 'n_2630_in', 'n_2631_in', 'n_2632_in', 'n_2633_in', 'n_2634_in', 'n_2635_in', 'n_2636_in', 'n_2637_in', 'n_2638_in', 'n_2639_in', 'n_2640_in', 'n_2641_in', 'n_2642_in', 'n_2643_in', 'n_2644_in', 'n_2645_in', 'n_2646_in', 'n_2647_in', 'n_2648_in', 'n_2649_in', 'n_2650_in', 'n_2651_in', 'n_2652_in', 'n_2653_in', 'n_2654_in', 'n_2655_in', 'n_2656_in', 'n_2657_in', 'n_2658_in', 'n_2659_in', 'n_2660_in', 'n_2661_in', 'n_2662_in', 'n_2663_in', 'n_2664_in', 'n_2665_in', 'n_2666_in', 'n_2667_in', 'n_2668_in', 'n_2669_in', 'n_2670_in', 'n_2671_in', 'n_2672_in', 'n_2673_in', 'n_2674_in', 'n_2675_in', 'n_2676_in', 'n_2677_in', 'n_2678_in', 'n_2679_in', 'n_2680_in', 'n_2681_in', 'n_2682_in', 'n_2683_in', 'n_2684_in', 'n_2685_in', 'n_2686_in', 'n_2687_in', 'n_2688_in', 'n_2689_in', 'n_2690_in', 'n_2691_in', 'n_2692_in', 'n_2693_in', 'n_2694_in', 'n_2695_in', 'n_2696_in', 'n_2697_in', 'n_2698_in', 'n_2699_in', 'n_2700_in', 'n_2701_in', 'n_2702_in', 'n_2703_in', 'n_2704_in', 'n_2705_in', 'n_2706_in', 'n_2707_in', 'n_2708_in', 'n_2709_in', 'n_2710_in', 'n_2711_in', 'n_2712_in', 'n_2713_in', 'n_2714_in', 'n_2715_in', 'n_2716_in', 'n_2717_in', 'n_2718_in', 'n_2719_in', 'n_2720_in', 'n_2721_in', 'n_2722_in', 'n_2723_in', 'n_2724_in', 'n_2725_in', 'n_2726_in', 'n_2727_in', 'n_2728_in', 'n_2729_in', 'n_2730_in', 'n_2731_in', 'n_2732_in', 'n_2733_in', 'n_2734_in', 'n_2735_in', 'n_2736_in', 'n_2737_in', 'n_2738_in', 'n_2739_in', 'n_2740_in', 'n_2741_in', 'n_2742_in', 'n_2743_in', 'n_2744_in', 'n_2745_in', 'n_2746_in', 'n_2747_in', 'n_2748_in', 'n_2749_in', 'n_2750_in', 'n_2751_in', 'n_2752_in', 'n_2753_in', 'n_2754_in', 'n_2755_in', 'n_2756_in', 'n_2757_in', 'n_2758_in', 'n_2759_in', 'n_2760_in', 'n_2761_in', 'n_2762_in', 'n_2763_in', 'n_2764_in', 'n_2765_in', 'n_2766_in', 'n_2767_in', 'n_2768_in', 'n_2769_in', 'n_2770_in', 'n_2771_in', 'n_2772_in', 'n_2773_in', 'n_2774_in', 'n_2775_in', 'n_2776_in', 'n_2777_in', 'n_2778_in', 'n_2779_in', 'n_2780_in', 'n_2781_in', 'n_2782_in', 'n_2783_in', 'n_2784_in', 'n_2785_in', 'n_2786_in', 'n_2787_in', 'n_2788_in', 'n_2789_in', 'n_2790_in', 'n_2791_in', 'n_2792_in', 'n_2793_in', 'n_2794_in', 'n_2795_in', 'n_2796_in', 'n_2797_in', 'n_2798_in', 'n_2799_in', 'n_2800_in', 'n_2801_in', 'n_2802_in', 'n_2803_in', 'n_2804_in', 'n_2805_in', 'n_2806_in', 'n_2807_in', 'n_2808_in', 'n_2809_in', 'n_2810_in', 'n_2811_in', 'n_2812_in', 'n_2813_in', 'n_2814_in', 'n_2815_in', 'n_2816_in', 'n_2817_in', 'n_2818_in', 'n_2819_in', 'n_2820_in', 'n_2821_in', 'n_2822_in', 'n_2823_in', 'n_2824_in', 'n_2825_in', 'n_2826_in', 'n_2827_in', 'n_2828_in', 'n_2829_in', 'n_2830_in', 'n_2831_in', 'n_2832_in', 'n_2833_in', 'n_2834_in', 'n_2835_in', 'n_2836_in', 'n_2837_in', 'n_2838_in', 'n_2839_in', 'n_2840_in', 'n_2841_in', 'n_2842_in', 'n_2843_in', 'n_2844_in', 'n_2845_in', 'n_2846_in', 'n_2847_in', 'n_2848_in', 'n_2849_in', 'n_2850_in', 'n_2851_in', 'n_2852_in', 'n_2853_in', 'n_2854_in', 'n_2855_in', 'n_2856_in', 'n_2857_in', 'n_2858_in', 'n_2859_in', 'n_2860_in', 'n_2861_in', 'n_2862_in', 'n_2863_in', 'n_2864_in', 'n_2865_in', 'n_2866_in', 'n_2867_in', 'n_2868_in', 'n_2869_in', 'n_2870_in', 'n_2871_in', 'n_2872_in', 'n_2873_in', 'n_2874_in', 'n_2875_in', 'n_2876_in', 'n_2877_in', 'n_2878_in', 'n_2879_in', 'n_2880_in', 'n_2881_in', 'n_2882_in', 'n_2883_in', 'n_2884_in', 'n_2885_in', 'n_2886_in', 'n_2887_in', 'n_2888_in', 'n_2889_in', 'n_2890_in', 'n_2891_in', 'n_2892_in', 'n_2893_in', 'n_2894_in', 'n_2895_in', 'n_2896_in', 'n_2897_in', 'n_2898_in', 'n_2899_in', 'n_2900_in', 'n_2901_in', 'n_2902_in', 'n_2903_in', 'n_2904_in', 'n_2905_in', 'n_2906_in', 'n_2907_in', 'n_2908_in', 'n_2909_in', 'n_2910_in', 'n_2911_in', 'n_2912_in', 'n_2913_in', 'n_2914_in', 'n_2915_in', 'n_2916_in', 'n_2917_in', 'n_2918_in', 'n_2919_in', 'n_2920_in', 'n_2921_in', 'n_2922_in', 'n_2923_in', 'n_2924_in', 'n_2925_in', 'n_2926_in', 'n_2927_in', 'n_2928_in', 'n_2929_in', 'n_2930_in', 'n_2931_in', 'n_2932_in', 'n_2933_in', 'n_2934_in', 'n_2935_in', 'n_2936_in', 'n_2937_in', 'n_2938_in', 'n_2939_in', 'n_2940_in', 'n_2941_in', 'n_2942_in', 'n_2943_in', 'n_2944_in', 'n_2945_in', 'n_2946_in', 'n_2947_in', 'n_2948_in', 'n_2949_in', 'n_2950_in', 'n_2951_in', 'n_2952_in', 'n_2953_in', 'n_2954_in', 'n_2955_in', 'n_2956_in', 'n_2957_in', 'n_2958_in', 'n_2959_in', 'n_2960_in', 'n_2961_in', 'n_2962_in', 'n_2963_in', 'n_2964_in', 'n_2965_in', 'n_2966_in', 'n_2967_in', 'n_2968_in', 'n_2969_in', 'n_2970_in', 'n_2971_in', 'n_2972_in', 'n_2973_in', 'n_2974_in', 'n_2975_in', 'n_2976_in', 'n_2977_in', 'n_2978_in', 'n_2979_in', 'n_2980_in', 'n_2981_in', 'n_2982_in', 'n_2983_in', 'n_2984_in', 'n_2985_in', 'n_2986_in', 'n_2987_in', 'n_2988_in', 'n_2989_in', 'n_2990_in', 'n_2991_in', 'n_2992_in', 'n_2993_in', 'n_2994_in', 'n_2995_in', 'n_2996_in', 'n_2997_in', 'n_2998_in', 'n_2999_in', 'n_3000_in', 'n_3001_in', 'n_3002_in', 'n_3003_in', 'n_3004_in', 'n_3005_in', 'n_3006_in', 'n_3007_in', 'n_3008_in', 'n_3009_in', 'n_3010_in', 'n_3011_in', 'n_3012_in', 'n_3013_in', 'n_3014_in', 'n_3015_in', 'n_3016_in', 'n_3017_in', 'n_3018_in', 'n_3019_in', 'n_3020_in', 'n_3021_in', 'n_3022_in', 'n_3023_in', 'n_3024_in', 'n_3025_in', 'n_3026_in', 'n_3027_in', 'n_3028_in', 'n_3029_in', 'n_3030_in', 'n_3031_in', 'n_3032_in', 'n_3033_in', 'n_3034_in', 'n_3035_in', 'n_3036_in', 'n_3037_in', 'n_3038_in', 'n_3039_in', 'n_3040_in', 'n_3041_in', 'n_3042_in', 'n_3043_in', 'n_3044_in', 'n_3045_in', 'n_3046_in', 'n_3047_in', 'n_3048_in', 'n_3049_in', 'n_3050_in', 'n_3051_in', 'n_3052_in', 'n_3053_in', 'n_3054_in', 'n_3055_in', 'n_3056_in'])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "code_tuple_mapping_in.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "fae4a32e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:19.639739Z",
     "iopub.status.busy": "2024-10-17T09:15:19.639293Z",
     "iopub.status.idle": "2024-10-17T09:15:19.717615Z",
     "shell.execute_reply": "2024-10-17T09:15:19.716349Z"
    },
    "papermill": {
     "duration": 0.105154,
     "end_time": "2024-10-17T09:15:19.720766",
     "exception": false,
     "start_time": "2024-10-17T09:15:19.615612",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_in[\"name\"] = df_in.apply(lambda x: tuple_code_mapping_in[x[\"tuple\"]],axis = 1)\n",
    "df_it[\"name\"] = df_it.apply(lambda x: tuple_code_mapping_it[x[\"tuple\"]],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "bcbde57b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:19.766975Z",
     "iopub.status.busy": "2024-10-17T09:15:19.766538Z",
     "iopub.status.idle": "2024-10-17T09:15:19.774671Z",
     "shell.execute_reply": "2024-10-17T09:15:19.773471Z"
    },
    "papermill": {
     "duration": 0.03442,
     "end_time": "2024-10-17T09:15:19.777126",
     "exception": false,
     "start_time": "2024-10-17T09:15:19.742706",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df_in = df_in[[\"name\",\"len\",\"tuple\",\"ratio\"]]\n",
    "df_it = df_it[[\"name\",\"len\",\"tuple\",\"ratio\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "26ba6922",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:19.823105Z",
     "iopub.status.busy": "2024-10-17T09:15:19.822650Z",
     "iopub.status.idle": "2024-10-17T09:15:19.845705Z",
     "shell.execute_reply": "2024-10-17T09:15:19.844427Z"
    },
    "papermill": {
     "duration": 0.049121,
     "end_time": "2024-10-17T09:15:19.848544",
     "exception": false,
     "start_time": "2024-10-17T09:15:19.799423",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>len</th>\n",
       "      <th>tuple</th>\n",
       "      <th>ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>n_0_it</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(arborio_rice,)</td>\n",
       "      <td>0.997783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>n_1_it</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(marsala_wine,)</td>\n",
       "      <td>0.997506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>n_2_it</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(pesto,)</td>\n",
       "      <td>0.997305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>n_3_it</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(linguine_pasta,)</td>\n",
       "      <td>0.997067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>n_4_it</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(pepperoni_sausage,)</td>\n",
       "      <td>0.996979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>n_2088_it</td>\n",
       "      <td>5.0</td>\n",
       "      <td>(parmesan_cheese, black_pepper, tomato, butter...</td>\n",
       "      <td>0.952381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>n_2089_it</td>\n",
       "      <td>5.0</td>\n",
       "      <td>(onion, black_pepper, tomato, butter, basil)</td>\n",
       "      <td>0.952381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>n_2090_it</td>\n",
       "      <td>5.0</td>\n",
       "      <td>(garlic, black_pepper, tomato, butter, basil)</td>\n",
       "      <td>0.952381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>n_2091_it</td>\n",
       "      <td>5.0</td>\n",
       "      <td>(garlic, tomato, egg, butter, basil)</td>\n",
       "      <td>0.952381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>n_2092_it</td>\n",
       "      <td>5.0</td>\n",
       "      <td>(garlic, parmesan_cheese, black_pepper, tomato...</td>\n",
       "      <td>0.952381</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2093 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         name  len                                              tuple  \\\n",
       "0      n_0_it  1.0                                    (arborio_rice,)   \n",
       "1      n_1_it  1.0                                    (marsala_wine,)   \n",
       "2      n_2_it  1.0                                           (pesto,)   \n",
       "3      n_3_it  1.0                                  (linguine_pasta,)   \n",
       "4      n_4_it  1.0                               (pepperoni_sausage,)   \n",
       "..        ...  ...                                                ...   \n",
       "95  n_2088_it  5.0  (parmesan_cheese, black_pepper, tomato, butter...   \n",
       "96  n_2089_it  5.0       (onion, black_pepper, tomato, butter, basil)   \n",
       "97  n_2090_it  5.0      (garlic, black_pepper, tomato, butter, basil)   \n",
       "98  n_2091_it  5.0               (garlic, tomato, egg, butter, basil)   \n",
       "99  n_2092_it  5.0  (garlic, parmesan_cheese, black_pepper, tomato...   \n",
       "\n",
       "       ratio  \n",
       "0   0.997783  \n",
       "1   0.997506  \n",
       "2   0.997305  \n",
       "3   0.997067  \n",
       "4   0.996979  \n",
       "..       ...  \n",
       "95  0.952381  \n",
       "96  0.952381  \n",
       "97  0.952381  \n",
       "98  0.952381  \n",
       "99  0.952381  \n",
       "\n",
       "[2093 rows x 4 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_it"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c342c73",
   "metadata": {
    "papermill": {
     "duration": 0.022872,
     "end_time": "2024-10-17T09:15:19.894906",
     "exception": false,
     "start_time": "2024-10-17T09:15:19.872034",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Redo"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4075e2b6",
   "metadata": {
    "papermill": {
     "duration": 0.022019,
     "end_time": "2024-10-17T09:15:19.941099",
     "exception": false,
     "start_time": "2024-10-17T09:15:19.919080",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Get central and tuple central embeddings"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bd9395fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:19.989223Z",
     "iopub.status.busy": "2024-10-17T09:15:19.988803Z",
     "iopub.status.idle": "2024-10-17T09:15:20.131982Z",
     "shell.execute_reply": "2024-10-17T09:15:20.130702Z"
    },
    "papermill": {
     "duration": 0.170446,
     "end_time": "2024-10-17T09:15:20.134906",
     "exception": false,
     "start_time": "2024-10-17T09:15:19.964460",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "import pandas as pd\n",
    "\n",
    "ingredients_in = {}\n",
    "ittr = 0\n",
    "for i in td_in[\"ingredients\"].iloc:\n",
    "    for j in i:\n",
    "        try: \n",
    "            x = ingredients_in[j]\n",
    "        except KeyError:\n",
    "            ingredients_in[j] = ittr\n",
    "            ittr += 1\n",
    "            \n",
    "ingredients_it = {}\n",
    "ittr = 0\n",
    "for i in td_it[\"ingredients\"].iloc:\n",
    "    for j in i:\n",
    "        try: \n",
    "            x = ingredients_it[j]\n",
    "        except KeyError:\n",
    "            ingredients_it[j] = ittr\n",
    "            ittr += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1d806b35",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:20.183226Z",
     "iopub.status.busy": "2024-10-17T09:15:20.182787Z",
     "iopub.status.idle": "2024-10-17T09:15:20.635738Z",
     "shell.execute_reply": "2024-10-17T09:15:20.634500Z"
    },
    "papermill": {
     "duration": 0.480757,
     "end_time": "2024-10-17T09:15:20.638676",
     "exception": false,
     "start_time": "2024-10-17T09:15:20.157919",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/1956403422.py:19: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df_in[\"name\"] = df_in.apply(lambda x: tuple_code_mapping_in[x[\"tuple\"]],axis = 1)\n"
     ]
    }
   ],
   "source": [
    "tup_list_pref = \"n_\"\n",
    "code_tuple_mapping_in = dict()\n",
    "code_tuple_mapping_it = dict()\n",
    "tuple_code_mapping_in = dict()\n",
    "tuple_code_mapping_it = dict()\n",
    "\n",
    "itr = 0\n",
    "for ind, row in df_in.iterrows():\n",
    "    code_tuple_mapping_in[tup_list_pref+str(itr)+\"_in\"] = row[\"tuple\"]\n",
    "    tuple_code_mapping_in[row[\"tuple\"]] = tup_list_pref+str(itr)+\"_in\"\n",
    "    itr += 1\n",
    "    \n",
    "itr = 0\n",
    "for ind, row in df_it.iterrows():\n",
    "    code_tuple_mapping_it[tup_list_pref+str(itr)+\"_it\"] = row[\"tuple\"]\n",
    "    tuple_code_mapping_it[row[\"tuple\"]] = tup_list_pref+str(itr)+\"_it\"\n",
    "    itr += 1\n",
    "    \n",
    "df_in[\"name\"] = df_in.apply(lambda x: tuple_code_mapping_in[x[\"tuple\"]],axis = 1)\n",
    "df_it[\"name\"] = df_it.apply(lambda x: tuple_code_mapping_it[x[\"tuple\"]],axis = 1)\n",
    "\n",
    "df_in = df_in[[\"name\",\"len\",\"tuple\",\"ratio\"]]\n",
    "df_it = df_it[[\"name\",\"len\",\"tuple\",\"ratio\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ba06036c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:20.688249Z",
     "iopub.status.busy": "2024-10-17T09:15:20.687764Z",
     "iopub.status.idle": "2024-10-17T09:15:20.695106Z",
     "shell.execute_reply": "2024-10-17T09:15:20.693939Z"
    },
    "papermill": {
     "duration": 0.034838,
     "end_time": "2024-10-17T09:15:20.697479",
     "exception": false,
     "start_time": "2024-10-17T09:15:20.662641",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "code_int_mapping_it = dict()\n",
    "int_code_mapping_it = dict()\n",
    "\n",
    "ittr = 0\n",
    "for i in code_tuple_mapping_it.keys():\n",
    "    code_int_mapping_it[i] = ittr\n",
    "    int_code_mapping_it[ittr] = i\n",
    "    ittr += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "95cf2c74",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:20.747294Z",
     "iopub.status.busy": "2024-10-17T09:15:20.746758Z",
     "iopub.status.idle": "2024-10-17T09:15:20.793372Z",
     "shell.execute_reply": "2024-10-17T09:15:20.792186Z"
    },
    "papermill": {
     "duration": 0.073853,
     "end_time": "2024-10-17T09:15:20.795834",
     "exception": false,
     "start_time": "2024-10-17T09:15:20.721981",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'n_0_it': 0,\n",
       " 'n_1_it': 1,\n",
       " 'n_2_it': 2,\n",
       " 'n_3_it': 3,\n",
       " 'n_4_it': 4,\n",
       " 'n_5_it': 5,\n",
       " 'n_6_it': 6,\n",
       " 'n_7_it': 7,\n",
       " 'n_8_it': 8,\n",
       " 'n_9_it': 9,\n",
       " 'n_10_it': 10,\n",
       " 'n_11_it': 11,\n",
       " 'n_12_it': 12,\n",
       " 'n_13_it': 13,\n",
       " 'n_14_it': 14,\n",
       " 'n_15_it': 15,\n",
       " 'n_16_it': 16,\n",
       " 'n_17_it': 17,\n",
       " 'n_18_it': 18,\n",
       " 'n_19_it': 19,\n",
       " 'n_20_it': 20,\n",
       " 'n_21_it': 21,\n",
       " 'n_22_it': 22,\n",
       " 'n_23_it': 23,\n",
       " 'n_24_it': 24,\n",
       " 'n_25_it': 25,\n",
       " 'n_26_it': 26,\n",
       " 'n_27_it': 27,\n",
       " 'n_28_it': 28,\n",
       " 'n_29_it': 29,\n",
       " 'n_30_it': 30,\n",
       " 'n_31_it': 31,\n",
       " 'n_32_it': 32,\n",
       " 'n_33_it': 33,\n",
       " 'n_34_it': 34,\n",
       " 'n_35_it': 35,\n",
       " 'n_36_it': 36,\n",
       " 'n_37_it': 37,\n",
       " 'n_38_it': 38,\n",
       " 'n_39_it': 39,\n",
       " 'n_40_it': 40,\n",
       " 'n_41_it': 41,\n",
       " 'n_42_it': 42,\n",
       " 'n_43_it': 43,\n",
       " 'n_44_it': 44,\n",
       " 'n_45_it': 45,\n",
       " 'n_46_it': 46,\n",
       " 'n_47_it': 47,\n",
       " 'n_48_it': 48,\n",
       " 'n_49_it': 49,\n",
       " 'n_50_it': 50,\n",
       " 'n_51_it': 51,\n",
       " 'n_52_it': 52,\n",
       " 'n_53_it': 53,\n",
       " 'n_54_it': 54,\n",
       " 'n_55_it': 55,\n",
       " 'n_56_it': 56,\n",
       " 'n_57_it': 57,\n",
       " 'n_58_it': 58,\n",
       " 'n_59_it': 59,\n",
       " 'n_60_it': 60,\n",
       " 'n_61_it': 61,\n",
       " 'n_62_it': 62,\n",
       " 'n_63_it': 63,\n",
       " 'n_64_it': 64,\n",
       " 'n_65_it': 65,\n",
       " 'n_66_it': 66,\n",
       " 'n_67_it': 67,\n",
       " 'n_68_it': 68,\n",
       " 'n_69_it': 69,\n",
       " 'n_70_it': 70,\n",
       " 'n_71_it': 71,\n",
       " 'n_72_it': 72,\n",
       " 'n_73_it': 73,\n",
       " 'n_74_it': 74,\n",
       " 'n_75_it': 75,\n",
       " 'n_76_it': 76,\n",
       " 'n_77_it': 77,\n",
       " 'n_78_it': 78,\n",
       " 'n_79_it': 79,\n",
       " 'n_80_it': 80,\n",
       " 'n_81_it': 81,\n",
       " 'n_82_it': 82,\n",
       " 'n_83_it': 83,\n",
       " 'n_84_it': 84,\n",
       " 'n_85_it': 85,\n",
       " 'n_86_it': 86,\n",
       " 'n_87_it': 87,\n",
       " 'n_88_it': 88,\n",
       " 'n_89_it': 89,\n",
       " 'n_90_it': 90,\n",
       " 'n_91_it': 91,\n",
       " 'n_92_it': 92,\n",
       " 'n_93_it': 93,\n",
       " 'n_94_it': 94,\n",
       " 'n_95_it': 95,\n",
       " 'n_96_it': 96,\n",
       " 'n_97_it': 97,\n",
       " 'n_98_it': 98,\n",
       " 'n_99_it': 99,\n",
       " 'n_100_it': 100,\n",
       " 'n_101_it': 101,\n",
       " 'n_102_it': 102,\n",
       " 'n_103_it': 103,\n",
       " 'n_104_it': 104,\n",
       " 'n_105_it': 105,\n",
       " 'n_106_it': 106,\n",
       " 'n_107_it': 107,\n",
       " 'n_108_it': 108,\n",
       " 'n_109_it': 109,\n",
       " 'n_110_it': 110,\n",
       " 'n_111_it': 111,\n",
       " 'n_112_it': 112,\n",
       " 'n_113_it': 113,\n",
       " 'n_114_it': 114,\n",
       " 'n_115_it': 115,\n",
       " 'n_116_it': 116,\n",
       " 'n_117_it': 117,\n",
       " 'n_118_it': 118,\n",
       " 'n_119_it': 119,\n",
       " 'n_120_it': 120,\n",
       " 'n_121_it': 121,\n",
       " 'n_122_it': 122,\n",
       " 'n_123_it': 123,\n",
       " 'n_124_it': 124,\n",
       " 'n_125_it': 125,\n",
       " 'n_126_it': 126,\n",
       " 'n_127_it': 127,\n",
       " 'n_128_it': 128,\n",
       " 'n_129_it': 129,\n",
       " 'n_130_it': 130,\n",
       " 'n_131_it': 131,\n",
       " 'n_132_it': 132,\n",
       " 'n_133_it': 133,\n",
       " 'n_134_it': 134,\n",
       " 'n_135_it': 135,\n",
       " 'n_136_it': 136,\n",
       " 'n_137_it': 137,\n",
       " 'n_138_it': 138,\n",
       " 'n_139_it': 139,\n",
       " 'n_140_it': 140,\n",
       " 'n_141_it': 141,\n",
       " 'n_142_it': 142,\n",
       " 'n_143_it': 143,\n",
       " 'n_144_it': 144,\n",
       " 'n_145_it': 145,\n",
       " 'n_146_it': 146,\n",
       " 'n_147_it': 147,\n",
       " 'n_148_it': 148,\n",
       " 'n_149_it': 149,\n",
       " 'n_150_it': 150,\n",
       " 'n_151_it': 151,\n",
       " 'n_152_it': 152,\n",
       " 'n_153_it': 153,\n",
       " 'n_154_it': 154,\n",
       " 'n_155_it': 155,\n",
       " 'n_156_it': 156,\n",
       " 'n_157_it': 157,\n",
       " 'n_158_it': 158,\n",
       " 'n_159_it': 159,\n",
       " 'n_160_it': 160,\n",
       " 'n_161_it': 161,\n",
       " 'n_162_it': 162,\n",
       " 'n_163_it': 163,\n",
       " 'n_164_it': 164,\n",
       " 'n_165_it': 165,\n",
       " 'n_166_it': 166,\n",
       " 'n_167_it': 167,\n",
       " 'n_168_it': 168,\n",
       " 'n_169_it': 169,\n",
       " 'n_170_it': 170,\n",
       " 'n_171_it': 171,\n",
       " 'n_172_it': 172,\n",
       " 'n_173_it': 173,\n",
       " 'n_174_it': 174,\n",
       " 'n_175_it': 175,\n",
       " 'n_176_it': 176,\n",
       " 'n_177_it': 177,\n",
       " 'n_178_it': 178,\n",
       " 'n_179_it': 179,\n",
       " 'n_180_it': 180,\n",
       " 'n_181_it': 181,\n",
       " 'n_182_it': 182,\n",
       " 'n_183_it': 183,\n",
       " 'n_184_it': 184,\n",
       " 'n_185_it': 185,\n",
       " 'n_186_it': 186,\n",
       " 'n_187_it': 187,\n",
       " 'n_188_it': 188,\n",
       " 'n_189_it': 189,\n",
       " 'n_190_it': 190,\n",
       " 'n_191_it': 191,\n",
       " 'n_192_it': 192,\n",
       " 'n_193_it': 193,\n",
       " 'n_194_it': 194,\n",
       " 'n_195_it': 195,\n",
       " 'n_196_it': 196,\n",
       " 'n_197_it': 197,\n",
       " 'n_198_it': 198,\n",
       " 'n_199_it': 199,\n",
       " 'n_200_it': 200,\n",
       " 'n_201_it': 201,\n",
       " 'n_202_it': 202,\n",
       " 'n_203_it': 203,\n",
       " 'n_204_it': 204,\n",
       " 'n_205_it': 205,\n",
       " 'n_206_it': 206,\n",
       " 'n_207_it': 207,\n",
       " 'n_208_it': 208,\n",
       " 'n_209_it': 209,\n",
       " 'n_210_it': 210,\n",
       " 'n_211_it': 211,\n",
       " 'n_212_it': 212,\n",
       " 'n_213_it': 213,\n",
       " 'n_214_it': 214,\n",
       " 'n_215_it': 215,\n",
       " 'n_216_it': 216,\n",
       " 'n_217_it': 217,\n",
       " 'n_218_it': 218,\n",
       " 'n_219_it': 219,\n",
       " 'n_220_it': 220,\n",
       " 'n_221_it': 221,\n",
       " 'n_222_it': 222,\n",
       " 'n_223_it': 223,\n",
       " 'n_224_it': 224,\n",
       " 'n_225_it': 225,\n",
       " 'n_226_it': 226,\n",
       " 'n_227_it': 227,\n",
       " 'n_228_it': 228,\n",
       " 'n_229_it': 229,\n",
       " 'n_230_it': 230,\n",
       " 'n_231_it': 231,\n",
       " 'n_232_it': 232,\n",
       " 'n_233_it': 233,\n",
       " 'n_234_it': 234,\n",
       " 'n_235_it': 235,\n",
       " 'n_236_it': 236,\n",
       " 'n_237_it': 237,\n",
       " 'n_238_it': 238,\n",
       " 'n_239_it': 239,\n",
       " 'n_240_it': 240,\n",
       " 'n_241_it': 241,\n",
       " 'n_242_it': 242,\n",
       " 'n_243_it': 243,\n",
       " 'n_244_it': 244,\n",
       " 'n_245_it': 245,\n",
       " 'n_246_it': 246,\n",
       " 'n_247_it': 247,\n",
       " 'n_248_it': 248,\n",
       " 'n_249_it': 249,\n",
       " 'n_250_it': 250,\n",
       " 'n_251_it': 251,\n",
       " 'n_252_it': 252,\n",
       " 'n_253_it': 253,\n",
       " 'n_254_it': 254,\n",
       " 'n_255_it': 255,\n",
       " 'n_256_it': 256,\n",
       " 'n_257_it': 257,\n",
       " 'n_258_it': 258,\n",
       " 'n_259_it': 259,\n",
       " 'n_260_it': 260,\n",
       " 'n_261_it': 261,\n",
       " 'n_262_it': 262,\n",
       " 'n_263_it': 263,\n",
       " 'n_264_it': 264,\n",
       " 'n_265_it': 265,\n",
       " 'n_266_it': 266,\n",
       " 'n_267_it': 267,\n",
       " 'n_268_it': 268,\n",
       " 'n_269_it': 269,\n",
       " 'n_270_it': 270,\n",
       " 'n_271_it': 271,\n",
       " 'n_272_it': 272,\n",
       " 'n_273_it': 273,\n",
       " 'n_274_it': 274,\n",
       " 'n_275_it': 275,\n",
       " 'n_276_it': 276,\n",
       " 'n_277_it': 277,\n",
       " 'n_278_it': 278,\n",
       " 'n_279_it': 279,\n",
       " 'n_280_it': 280,\n",
       " 'n_281_it': 281,\n",
       " 'n_282_it': 282,\n",
       " 'n_283_it': 283,\n",
       " 'n_284_it': 284,\n",
       " 'n_285_it': 285,\n",
       " 'n_286_it': 286,\n",
       " 'n_287_it': 287,\n",
       " 'n_288_it': 288,\n",
       " 'n_289_it': 289,\n",
       " 'n_290_it': 290,\n",
       " 'n_291_it': 291,\n",
       " 'n_292_it': 292,\n",
       " 'n_293_it': 293,\n",
       " 'n_294_it': 294,\n",
       " 'n_295_it': 295,\n",
       " 'n_296_it': 296,\n",
       " 'n_297_it': 297,\n",
       " 'n_298_it': 298,\n",
       " 'n_299_it': 299,\n",
       " 'n_300_it': 300,\n",
       " 'n_301_it': 301,\n",
       " 'n_302_it': 302,\n",
       " 'n_303_it': 303,\n",
       " 'n_304_it': 304,\n",
       " 'n_305_it': 305,\n",
       " 'n_306_it': 306,\n",
       " 'n_307_it': 307,\n",
       " 'n_308_it': 308,\n",
       " 'n_309_it': 309,\n",
       " 'n_310_it': 310,\n",
       " 'n_311_it': 311,\n",
       " 'n_312_it': 312,\n",
       " 'n_313_it': 313,\n",
       " 'n_314_it': 314,\n",
       " 'n_315_it': 315,\n",
       " 'n_316_it': 316,\n",
       " 'n_317_it': 317,\n",
       " 'n_318_it': 318,\n",
       " 'n_319_it': 319,\n",
       " 'n_320_it': 320,\n",
       " 'n_321_it': 321,\n",
       " 'n_322_it': 322,\n",
       " 'n_323_it': 323,\n",
       " 'n_324_it': 324,\n",
       " 'n_325_it': 325,\n",
       " 'n_326_it': 326,\n",
       " 'n_327_it': 327,\n",
       " 'n_328_it': 328,\n",
       " 'n_329_it': 329,\n",
       " 'n_330_it': 330,\n",
       " 'n_331_it': 331,\n",
       " 'n_332_it': 332,\n",
       " 'n_333_it': 333,\n",
       " 'n_334_it': 334,\n",
       " 'n_335_it': 335,\n",
       " 'n_336_it': 336,\n",
       " 'n_337_it': 337,\n",
       " 'n_338_it': 338,\n",
       " 'n_339_it': 339,\n",
       " 'n_340_it': 340,\n",
       " 'n_341_it': 341,\n",
       " 'n_342_it': 342,\n",
       " 'n_343_it': 343,\n",
       " 'n_344_it': 344,\n",
       " 'n_345_it': 345,\n",
       " 'n_346_it': 346,\n",
       " 'n_347_it': 347,\n",
       " 'n_348_it': 348,\n",
       " 'n_349_it': 349,\n",
       " 'n_350_it': 350,\n",
       " 'n_351_it': 351,\n",
       " 'n_352_it': 352,\n",
       " 'n_353_it': 353,\n",
       " 'n_354_it': 354,\n",
       " 'n_355_it': 355,\n",
       " 'n_356_it': 356,\n",
       " 'n_357_it': 357,\n",
       " 'n_358_it': 358,\n",
       " 'n_359_it': 359,\n",
       " 'n_360_it': 360,\n",
       " 'n_361_it': 361,\n",
       " 'n_362_it': 362,\n",
       " 'n_363_it': 363,\n",
       " 'n_364_it': 364,\n",
       " 'n_365_it': 365,\n",
       " 'n_366_it': 366,\n",
       " 'n_367_it': 367,\n",
       " 'n_368_it': 368,\n",
       " 'n_369_it': 369,\n",
       " 'n_370_it': 370,\n",
       " 'n_371_it': 371,\n",
       " 'n_372_it': 372,\n",
       " 'n_373_it': 373,\n",
       " 'n_374_it': 374,\n",
       " 'n_375_it': 375,\n",
       " 'n_376_it': 376,\n",
       " 'n_377_it': 377,\n",
       " 'n_378_it': 378,\n",
       " 'n_379_it': 379,\n",
       " 'n_380_it': 380,\n",
       " 'n_381_it': 381,\n",
       " 'n_382_it': 382,\n",
       " 'n_383_it': 383,\n",
       " 'n_384_it': 384,\n",
       " 'n_385_it': 385,\n",
       " 'n_386_it': 386,\n",
       " 'n_387_it': 387,\n",
       " 'n_388_it': 388,\n",
       " 'n_389_it': 389,\n",
       " 'n_390_it': 390,\n",
       " 'n_391_it': 391,\n",
       " 'n_392_it': 392,\n",
       " 'n_393_it': 393,\n",
       " 'n_394_it': 394,\n",
       " 'n_395_it': 395,\n",
       " 'n_396_it': 396,\n",
       " 'n_397_it': 397,\n",
       " 'n_398_it': 398,\n",
       " 'n_399_it': 399,\n",
       " 'n_400_it': 400,\n",
       " 'n_401_it': 401,\n",
       " 'n_402_it': 402,\n",
       " 'n_403_it': 403,\n",
       " 'n_404_it': 404,\n",
       " 'n_405_it': 405,\n",
       " 'n_406_it': 406,\n",
       " 'n_407_it': 407,\n",
       " 'n_408_it': 408,\n",
       " 'n_409_it': 409,\n",
       " 'n_410_it': 410,\n",
       " 'n_411_it': 411,\n",
       " 'n_412_it': 412,\n",
       " 'n_413_it': 413,\n",
       " 'n_414_it': 414,\n",
       " 'n_415_it': 415,\n",
       " 'n_416_it': 416,\n",
       " 'n_417_it': 417,\n",
       " 'n_418_it': 418,\n",
       " 'n_419_it': 419,\n",
       " 'n_420_it': 420,\n",
       " 'n_421_it': 421,\n",
       " 'n_422_it': 422,\n",
       " 'n_423_it': 423,\n",
       " 'n_424_it': 424,\n",
       " 'n_425_it': 425,\n",
       " 'n_426_it': 426,\n",
       " 'n_427_it': 427,\n",
       " 'n_428_it': 428,\n",
       " 'n_429_it': 429,\n",
       " 'n_430_it': 430,\n",
       " 'n_431_it': 431,\n",
       " 'n_432_it': 432,\n",
       " 'n_433_it': 433,\n",
       " 'n_434_it': 434,\n",
       " 'n_435_it': 435,\n",
       " 'n_436_it': 436,\n",
       " 'n_437_it': 437,\n",
       " 'n_438_it': 438,\n",
       " 'n_439_it': 439,\n",
       " 'n_440_it': 440,\n",
       " 'n_441_it': 441,\n",
       " 'n_442_it': 442,\n",
       " 'n_443_it': 443,\n",
       " 'n_444_it': 444,\n",
       " 'n_445_it': 445,\n",
       " 'n_446_it': 446,\n",
       " 'n_447_it': 447,\n",
       " 'n_448_it': 448,\n",
       " 'n_449_it': 449,\n",
       " 'n_450_it': 450,\n",
       " 'n_451_it': 451,\n",
       " 'n_452_it': 452,\n",
       " 'n_453_it': 453,\n",
       " 'n_454_it': 454,\n",
       " 'n_455_it': 455,\n",
       " 'n_456_it': 456,\n",
       " 'n_457_it': 457,\n",
       " 'n_458_it': 458,\n",
       " 'n_459_it': 459,\n",
       " 'n_460_it': 460,\n",
       " 'n_461_it': 461,\n",
       " 'n_462_it': 462,\n",
       " 'n_463_it': 463,\n",
       " 'n_464_it': 464,\n",
       " 'n_465_it': 465,\n",
       " 'n_466_it': 466,\n",
       " 'n_467_it': 467,\n",
       " 'n_468_it': 468,\n",
       " 'n_469_it': 469,\n",
       " 'n_470_it': 470,\n",
       " 'n_471_it': 471,\n",
       " 'n_472_it': 472,\n",
       " 'n_473_it': 473,\n",
       " 'n_474_it': 474,\n",
       " 'n_475_it': 475,\n",
       " 'n_476_it': 476,\n",
       " 'n_477_it': 477,\n",
       " 'n_478_it': 478,\n",
       " 'n_479_it': 479,\n",
       " 'n_480_it': 480,\n",
       " 'n_481_it': 481,\n",
       " 'n_482_it': 482,\n",
       " 'n_483_it': 483,\n",
       " 'n_484_it': 484,\n",
       " 'n_485_it': 485,\n",
       " 'n_486_it': 486,\n",
       " 'n_487_it': 487,\n",
       " 'n_488_it': 488,\n",
       " 'n_489_it': 489,\n",
       " 'n_490_it': 490,\n",
       " 'n_491_it': 491,\n",
       " 'n_492_it': 492,\n",
       " 'n_493_it': 493,\n",
       " 'n_494_it': 494,\n",
       " 'n_495_it': 495,\n",
       " 'n_496_it': 496,\n",
       " 'n_497_it': 497,\n",
       " 'n_498_it': 498,\n",
       " 'n_499_it': 499,\n",
       " 'n_500_it': 500,\n",
       " 'n_501_it': 501,\n",
       " 'n_502_it': 502,\n",
       " 'n_503_it': 503,\n",
       " 'n_504_it': 504,\n",
       " 'n_505_it': 505,\n",
       " 'n_506_it': 506,\n",
       " 'n_507_it': 507,\n",
       " 'n_508_it': 508,\n",
       " 'n_509_it': 509,\n",
       " 'n_510_it': 510,\n",
       " 'n_511_it': 511,\n",
       " 'n_512_it': 512,\n",
       " 'n_513_it': 513,\n",
       " 'n_514_it': 514,\n",
       " 'n_515_it': 515,\n",
       " 'n_516_it': 516,\n",
       " 'n_517_it': 517,\n",
       " 'n_518_it': 518,\n",
       " 'n_519_it': 519,\n",
       " 'n_520_it': 520,\n",
       " 'n_521_it': 521,\n",
       " 'n_522_it': 522,\n",
       " 'n_523_it': 523,\n",
       " 'n_524_it': 524,\n",
       " 'n_525_it': 525,\n",
       " 'n_526_it': 526,\n",
       " 'n_527_it': 527,\n",
       " 'n_528_it': 528,\n",
       " 'n_529_it': 529,\n",
       " 'n_530_it': 530,\n",
       " 'n_531_it': 531,\n",
       " 'n_532_it': 532,\n",
       " 'n_533_it': 533,\n",
       " 'n_534_it': 534,\n",
       " 'n_535_it': 535,\n",
       " 'n_536_it': 536,\n",
       " 'n_537_it': 537,\n",
       " 'n_538_it': 538,\n",
       " 'n_539_it': 539,\n",
       " 'n_540_it': 540,\n",
       " 'n_541_it': 541,\n",
       " 'n_542_it': 542,\n",
       " 'n_543_it': 543,\n",
       " 'n_544_it': 544,\n",
       " 'n_545_it': 545,\n",
       " 'n_546_it': 546,\n",
       " 'n_547_it': 547,\n",
       " 'n_548_it': 548,\n",
       " 'n_549_it': 549,\n",
       " 'n_550_it': 550,\n",
       " 'n_551_it': 551,\n",
       " 'n_552_it': 552,\n",
       " 'n_553_it': 553,\n",
       " 'n_554_it': 554,\n",
       " 'n_555_it': 555,\n",
       " 'n_556_it': 556,\n",
       " 'n_557_it': 557,\n",
       " 'n_558_it': 558,\n",
       " 'n_559_it': 559,\n",
       " 'n_560_it': 560,\n",
       " 'n_561_it': 561,\n",
       " 'n_562_it': 562,\n",
       " 'n_563_it': 563,\n",
       " 'n_564_it': 564,\n",
       " 'n_565_it': 565,\n",
       " 'n_566_it': 566,\n",
       " 'n_567_it': 567,\n",
       " 'n_568_it': 568,\n",
       " 'n_569_it': 569,\n",
       " 'n_570_it': 570,\n",
       " 'n_571_it': 571,\n",
       " 'n_572_it': 572,\n",
       " 'n_573_it': 573,\n",
       " 'n_574_it': 574,\n",
       " 'n_575_it': 575,\n",
       " 'n_576_it': 576,\n",
       " 'n_577_it': 577,\n",
       " 'n_578_it': 578,\n",
       " 'n_579_it': 579,\n",
       " 'n_580_it': 580,\n",
       " 'n_581_it': 581,\n",
       " 'n_582_it': 582,\n",
       " 'n_583_it': 583,\n",
       " 'n_584_it': 584,\n",
       " 'n_585_it': 585,\n",
       " 'n_586_it': 586,\n",
       " 'n_587_it': 587,\n",
       " 'n_588_it': 588,\n",
       " 'n_589_it': 589,\n",
       " 'n_590_it': 590,\n",
       " 'n_591_it': 591,\n",
       " 'n_592_it': 592,\n",
       " 'n_593_it': 593,\n",
       " 'n_594_it': 594,\n",
       " 'n_595_it': 595,\n",
       " 'n_596_it': 596,\n",
       " 'n_597_it': 597,\n",
       " 'n_598_it': 598,\n",
       " 'n_599_it': 599,\n",
       " 'n_600_it': 600,\n",
       " 'n_601_it': 601,\n",
       " 'n_602_it': 602,\n",
       " 'n_603_it': 603,\n",
       " 'n_604_it': 604,\n",
       " 'n_605_it': 605,\n",
       " 'n_606_it': 606,\n",
       " 'n_607_it': 607,\n",
       " 'n_608_it': 608,\n",
       " 'n_609_it': 609,\n",
       " 'n_610_it': 610,\n",
       " 'n_611_it': 611,\n",
       " 'n_612_it': 612,\n",
       " 'n_613_it': 613,\n",
       " 'n_614_it': 614,\n",
       " 'n_615_it': 615,\n",
       " 'n_616_it': 616,\n",
       " 'n_617_it': 617,\n",
       " 'n_618_it': 618,\n",
       " 'n_619_it': 619,\n",
       " 'n_620_it': 620,\n",
       " 'n_621_it': 621,\n",
       " 'n_622_it': 622,\n",
       " 'n_623_it': 623,\n",
       " 'n_624_it': 624,\n",
       " 'n_625_it': 625,\n",
       " 'n_626_it': 626,\n",
       " 'n_627_it': 627,\n",
       " 'n_628_it': 628,\n",
       " 'n_629_it': 629,\n",
       " 'n_630_it': 630,\n",
       " 'n_631_it': 631,\n",
       " 'n_632_it': 632,\n",
       " 'n_633_it': 633,\n",
       " 'n_634_it': 634,\n",
       " 'n_635_it': 635,\n",
       " 'n_636_it': 636,\n",
       " 'n_637_it': 637,\n",
       " 'n_638_it': 638,\n",
       " 'n_639_it': 639,\n",
       " 'n_640_it': 640,\n",
       " 'n_641_it': 641,\n",
       " 'n_642_it': 642,\n",
       " 'n_643_it': 643,\n",
       " 'n_644_it': 644,\n",
       " 'n_645_it': 645,\n",
       " 'n_646_it': 646,\n",
       " 'n_647_it': 647,\n",
       " 'n_648_it': 648,\n",
       " 'n_649_it': 649,\n",
       " 'n_650_it': 650,\n",
       " 'n_651_it': 651,\n",
       " 'n_652_it': 652,\n",
       " 'n_653_it': 653,\n",
       " 'n_654_it': 654,\n",
       " 'n_655_it': 655,\n",
       " 'n_656_it': 656,\n",
       " 'n_657_it': 657,\n",
       " 'n_658_it': 658,\n",
       " 'n_659_it': 659,\n",
       " 'n_660_it': 660,\n",
       " 'n_661_it': 661,\n",
       " 'n_662_it': 662,\n",
       " 'n_663_it': 663,\n",
       " 'n_664_it': 664,\n",
       " 'n_665_it': 665,\n",
       " 'n_666_it': 666,\n",
       " 'n_667_it': 667,\n",
       " 'n_668_it': 668,\n",
       " 'n_669_it': 669,\n",
       " 'n_670_it': 670,\n",
       " 'n_671_it': 671,\n",
       " 'n_672_it': 672,\n",
       " 'n_673_it': 673,\n",
       " 'n_674_it': 674,\n",
       " 'n_675_it': 675,\n",
       " 'n_676_it': 676,\n",
       " 'n_677_it': 677,\n",
       " 'n_678_it': 678,\n",
       " 'n_679_it': 679,\n",
       " 'n_680_it': 680,\n",
       " 'n_681_it': 681,\n",
       " 'n_682_it': 682,\n",
       " 'n_683_it': 683,\n",
       " 'n_684_it': 684,\n",
       " 'n_685_it': 685,\n",
       " 'n_686_it': 686,\n",
       " 'n_687_it': 687,\n",
       " 'n_688_it': 688,\n",
       " 'n_689_it': 689,\n",
       " 'n_690_it': 690,\n",
       " 'n_691_it': 691,\n",
       " 'n_692_it': 692,\n",
       " 'n_693_it': 693,\n",
       " 'n_694_it': 694,\n",
       " 'n_695_it': 695,\n",
       " 'n_696_it': 696,\n",
       " 'n_697_it': 697,\n",
       " 'n_698_it': 698,\n",
       " 'n_699_it': 699,\n",
       " 'n_700_it': 700,\n",
       " 'n_701_it': 701,\n",
       " 'n_702_it': 702,\n",
       " 'n_703_it': 703,\n",
       " 'n_704_it': 704,\n",
       " 'n_705_it': 705,\n",
       " 'n_706_it': 706,\n",
       " 'n_707_it': 707,\n",
       " 'n_708_it': 708,\n",
       " 'n_709_it': 709,\n",
       " 'n_710_it': 710,\n",
       " 'n_711_it': 711,\n",
       " 'n_712_it': 712,\n",
       " 'n_713_it': 713,\n",
       " 'n_714_it': 714,\n",
       " 'n_715_it': 715,\n",
       " 'n_716_it': 716,\n",
       " 'n_717_it': 717,\n",
       " 'n_718_it': 718,\n",
       " 'n_719_it': 719,\n",
       " 'n_720_it': 720,\n",
       " 'n_721_it': 721,\n",
       " 'n_722_it': 722,\n",
       " 'n_723_it': 723,\n",
       " 'n_724_it': 724,\n",
       " 'n_725_it': 725,\n",
       " 'n_726_it': 726,\n",
       " 'n_727_it': 727,\n",
       " 'n_728_it': 728,\n",
       " 'n_729_it': 729,\n",
       " 'n_730_it': 730,\n",
       " 'n_731_it': 731,\n",
       " 'n_732_it': 732,\n",
       " 'n_733_it': 733,\n",
       " 'n_734_it': 734,\n",
       " 'n_735_it': 735,\n",
       " 'n_736_it': 736,\n",
       " 'n_737_it': 737,\n",
       " 'n_738_it': 738,\n",
       " 'n_739_it': 739,\n",
       " 'n_740_it': 740,\n",
       " 'n_741_it': 741,\n",
       " 'n_742_it': 742,\n",
       " 'n_743_it': 743,\n",
       " 'n_744_it': 744,\n",
       " 'n_745_it': 745,\n",
       " 'n_746_it': 746,\n",
       " 'n_747_it': 747,\n",
       " 'n_748_it': 748,\n",
       " 'n_749_it': 749,\n",
       " 'n_750_it': 750,\n",
       " 'n_751_it': 751,\n",
       " 'n_752_it': 752,\n",
       " 'n_753_it': 753,\n",
       " 'n_754_it': 754,\n",
       " 'n_755_it': 755,\n",
       " 'n_756_it': 756,\n",
       " 'n_757_it': 757,\n",
       " 'n_758_it': 758,\n",
       " 'n_759_it': 759,\n",
       " 'n_760_it': 760,\n",
       " 'n_761_it': 761,\n",
       " 'n_762_it': 762,\n",
       " 'n_763_it': 763,\n",
       " 'n_764_it': 764,\n",
       " 'n_765_it': 765,\n",
       " 'n_766_it': 766,\n",
       " 'n_767_it': 767,\n",
       " 'n_768_it': 768,\n",
       " 'n_769_it': 769,\n",
       " 'n_770_it': 770,\n",
       " 'n_771_it': 771,\n",
       " 'n_772_it': 772,\n",
       " 'n_773_it': 773,\n",
       " 'n_774_it': 774,\n",
       " 'n_775_it': 775,\n",
       " 'n_776_it': 776,\n",
       " 'n_777_it': 777,\n",
       " 'n_778_it': 778,\n",
       " 'n_779_it': 779,\n",
       " 'n_780_it': 780,\n",
       " 'n_781_it': 781,\n",
       " 'n_782_it': 782,\n",
       " 'n_783_it': 783,\n",
       " 'n_784_it': 784,\n",
       " 'n_785_it': 785,\n",
       " 'n_786_it': 786,\n",
       " 'n_787_it': 787,\n",
       " 'n_788_it': 788,\n",
       " 'n_789_it': 789,\n",
       " 'n_790_it': 790,\n",
       " 'n_791_it': 791,\n",
       " 'n_792_it': 792,\n",
       " 'n_793_it': 793,\n",
       " 'n_794_it': 794,\n",
       " 'n_795_it': 795,\n",
       " 'n_796_it': 796,\n",
       " 'n_797_it': 797,\n",
       " 'n_798_it': 798,\n",
       " 'n_799_it': 799,\n",
       " 'n_800_it': 800,\n",
       " 'n_801_it': 801,\n",
       " 'n_802_it': 802,\n",
       " 'n_803_it': 803,\n",
       " 'n_804_it': 804,\n",
       " 'n_805_it': 805,\n",
       " 'n_806_it': 806,\n",
       " 'n_807_it': 807,\n",
       " 'n_808_it': 808,\n",
       " 'n_809_it': 809,\n",
       " 'n_810_it': 810,\n",
       " 'n_811_it': 811,\n",
       " 'n_812_it': 812,\n",
       " 'n_813_it': 813,\n",
       " 'n_814_it': 814,\n",
       " 'n_815_it': 815,\n",
       " 'n_816_it': 816,\n",
       " 'n_817_it': 817,\n",
       " 'n_818_it': 818,\n",
       " 'n_819_it': 819,\n",
       " 'n_820_it': 820,\n",
       " 'n_821_it': 821,\n",
       " 'n_822_it': 822,\n",
       " 'n_823_it': 823,\n",
       " 'n_824_it': 824,\n",
       " 'n_825_it': 825,\n",
       " 'n_826_it': 826,\n",
       " 'n_827_it': 827,\n",
       " 'n_828_it': 828,\n",
       " 'n_829_it': 829,\n",
       " 'n_830_it': 830,\n",
       " 'n_831_it': 831,\n",
       " 'n_832_it': 832,\n",
       " 'n_833_it': 833,\n",
       " 'n_834_it': 834,\n",
       " 'n_835_it': 835,\n",
       " 'n_836_it': 836,\n",
       " 'n_837_it': 837,\n",
       " 'n_838_it': 838,\n",
       " 'n_839_it': 839,\n",
       " 'n_840_it': 840,\n",
       " 'n_841_it': 841,\n",
       " 'n_842_it': 842,\n",
       " 'n_843_it': 843,\n",
       " 'n_844_it': 844,\n",
       " 'n_845_it': 845,\n",
       " 'n_846_it': 846,\n",
       " 'n_847_it': 847,\n",
       " 'n_848_it': 848,\n",
       " 'n_849_it': 849,\n",
       " 'n_850_it': 850,\n",
       " 'n_851_it': 851,\n",
       " 'n_852_it': 852,\n",
       " 'n_853_it': 853,\n",
       " 'n_854_it': 854,\n",
       " 'n_855_it': 855,\n",
       " 'n_856_it': 856,\n",
       " 'n_857_it': 857,\n",
       " 'n_858_it': 858,\n",
       " 'n_859_it': 859,\n",
       " 'n_860_it': 860,\n",
       " 'n_861_it': 861,\n",
       " 'n_862_it': 862,\n",
       " 'n_863_it': 863,\n",
       " 'n_864_it': 864,\n",
       " 'n_865_it': 865,\n",
       " 'n_866_it': 866,\n",
       " 'n_867_it': 867,\n",
       " 'n_868_it': 868,\n",
       " 'n_869_it': 869,\n",
       " 'n_870_it': 870,\n",
       " 'n_871_it': 871,\n",
       " 'n_872_it': 872,\n",
       " 'n_873_it': 873,\n",
       " 'n_874_it': 874,\n",
       " 'n_875_it': 875,\n",
       " 'n_876_it': 876,\n",
       " 'n_877_it': 877,\n",
       " 'n_878_it': 878,\n",
       " 'n_879_it': 879,\n",
       " 'n_880_it': 880,\n",
       " 'n_881_it': 881,\n",
       " 'n_882_it': 882,\n",
       " 'n_883_it': 883,\n",
       " 'n_884_it': 884,\n",
       " 'n_885_it': 885,\n",
       " 'n_886_it': 886,\n",
       " 'n_887_it': 887,\n",
       " 'n_888_it': 888,\n",
       " 'n_889_it': 889,\n",
       " 'n_890_it': 890,\n",
       " 'n_891_it': 891,\n",
       " 'n_892_it': 892,\n",
       " 'n_893_it': 893,\n",
       " 'n_894_it': 894,\n",
       " 'n_895_it': 895,\n",
       " 'n_896_it': 896,\n",
       " 'n_897_it': 897,\n",
       " 'n_898_it': 898,\n",
       " 'n_899_it': 899,\n",
       " 'n_900_it': 900,\n",
       " 'n_901_it': 901,\n",
       " 'n_902_it': 902,\n",
       " 'n_903_it': 903,\n",
       " 'n_904_it': 904,\n",
       " 'n_905_it': 905,\n",
       " 'n_906_it': 906,\n",
       " 'n_907_it': 907,\n",
       " 'n_908_it': 908,\n",
       " 'n_909_it': 909,\n",
       " 'n_910_it': 910,\n",
       " 'n_911_it': 911,\n",
       " 'n_912_it': 912,\n",
       " 'n_913_it': 913,\n",
       " 'n_914_it': 914,\n",
       " 'n_915_it': 915,\n",
       " 'n_916_it': 916,\n",
       " 'n_917_it': 917,\n",
       " 'n_918_it': 918,\n",
       " 'n_919_it': 919,\n",
       " 'n_920_it': 920,\n",
       " 'n_921_it': 921,\n",
       " 'n_922_it': 922,\n",
       " 'n_923_it': 923,\n",
       " 'n_924_it': 924,\n",
       " 'n_925_it': 925,\n",
       " 'n_926_it': 926,\n",
       " 'n_927_it': 927,\n",
       " 'n_928_it': 928,\n",
       " 'n_929_it': 929,\n",
       " 'n_930_it': 930,\n",
       " 'n_931_it': 931,\n",
       " 'n_932_it': 932,\n",
       " 'n_933_it': 933,\n",
       " 'n_934_it': 934,\n",
       " 'n_935_it': 935,\n",
       " 'n_936_it': 936,\n",
       " 'n_937_it': 937,\n",
       " 'n_938_it': 938,\n",
       " 'n_939_it': 939,\n",
       " 'n_940_it': 940,\n",
       " 'n_941_it': 941,\n",
       " 'n_942_it': 942,\n",
       " 'n_943_it': 943,\n",
       " 'n_944_it': 944,\n",
       " 'n_945_it': 945,\n",
       " 'n_946_it': 946,\n",
       " 'n_947_it': 947,\n",
       " 'n_948_it': 948,\n",
       " 'n_949_it': 949,\n",
       " 'n_950_it': 950,\n",
       " 'n_951_it': 951,\n",
       " 'n_952_it': 952,\n",
       " 'n_953_it': 953,\n",
       " 'n_954_it': 954,\n",
       " 'n_955_it': 955,\n",
       " 'n_956_it': 956,\n",
       " 'n_957_it': 957,\n",
       " 'n_958_it': 958,\n",
       " 'n_959_it': 959,\n",
       " 'n_960_it': 960,\n",
       " 'n_961_it': 961,\n",
       " 'n_962_it': 962,\n",
       " 'n_963_it': 963,\n",
       " 'n_964_it': 964,\n",
       " 'n_965_it': 965,\n",
       " 'n_966_it': 966,\n",
       " 'n_967_it': 967,\n",
       " 'n_968_it': 968,\n",
       " 'n_969_it': 969,\n",
       " 'n_970_it': 970,\n",
       " 'n_971_it': 971,\n",
       " 'n_972_it': 972,\n",
       " 'n_973_it': 973,\n",
       " 'n_974_it': 974,\n",
       " 'n_975_it': 975,\n",
       " 'n_976_it': 976,\n",
       " 'n_977_it': 977,\n",
       " 'n_978_it': 978,\n",
       " 'n_979_it': 979,\n",
       " 'n_980_it': 980,\n",
       " 'n_981_it': 981,\n",
       " 'n_982_it': 982,\n",
       " 'n_983_it': 983,\n",
       " 'n_984_it': 984,\n",
       " 'n_985_it': 985,\n",
       " 'n_986_it': 986,\n",
       " 'n_987_it': 987,\n",
       " 'n_988_it': 988,\n",
       " 'n_989_it': 989,\n",
       " 'n_990_it': 990,\n",
       " 'n_991_it': 991,\n",
       " 'n_992_it': 992,\n",
       " 'n_993_it': 993,\n",
       " 'n_994_it': 994,\n",
       " 'n_995_it': 995,\n",
       " 'n_996_it': 996,\n",
       " 'n_997_it': 997,\n",
       " 'n_998_it': 998,\n",
       " 'n_999_it': 999,\n",
       " ...}"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "code_int_mapping_it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "69bb0557",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:20.845504Z",
     "iopub.status.busy": "2024-10-17T09:15:20.845028Z",
     "iopub.status.idle": "2024-10-17T09:15:25.135472Z",
     "shell.execute_reply": "2024-10-17T09:15:25.134252Z"
    },
    "papermill": {
     "duration": 4.318253,
     "end_time": "2024-10-17T09:15:25.138216",
     "exception": false,
     "start_time": "2024-10-17T09:15:20.819963",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/1689998908.py:17: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  read_tensors = torch.load(\"/kaggle/input/cusine-embeddings-1/ingredient_embeddings_final (1).pt\")\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "import numpy as np\n",
    "\n",
    "in_embeddings = {\n",
    "    'name': [],\n",
    "    'embbedings': []\n",
    "}\n",
    "\n",
    "it_embeddings = {\n",
    "    'name': [],\n",
    "    'embbedings': []\n",
    "}\n",
    "\n",
    "with open(\"/kaggle/input/cusine-embeddings-1/ingredients_list_final2.txt\",\"r\") as f:\n",
    "    read_ings = f.read().split()\n",
    "\n",
    "read_tensors = torch.load(\"/kaggle/input/cusine-embeddings-1/ingredient_embeddings_final (1).pt\")\n",
    "    \n",
    "raw_embedding_map = dict()\n",
    "\n",
    "for i in range(len(read_ings)):\n",
    "    raw_embedding_map[read_ings[i]] = read_tensors[i]\n",
    "\n",
    "for i in ingredients_in.keys():\n",
    "    in_embeddings['name'].append(i)\n",
    "    in_embeddings['embbedings'].append(raw_embedding_map[i])\n",
    "    \n",
    "for i in ingredients_it.keys():\n",
    "    it_embeddings['name'].append(i)\n",
    "    it_embeddings['embbedings'].append(raw_embedding_map[i])\n",
    "    \n",
    "in_embeddings = pd.DataFrame(in_embeddings) \n",
    "it_embeddings = pd.DataFrame(it_embeddings) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "5b433a46",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:25.188410Z",
     "iopub.status.busy": "2024-10-17T09:15:25.187784Z",
     "iopub.status.idle": "2024-10-17T09:15:25.469683Z",
     "shell.execute_reply": "2024-10-17T09:15:25.468489Z"
    },
    "papermill": {
     "duration": 0.310061,
     "end_time": "2024-10-17T09:15:25.472249",
     "exception": false,
     "start_time": "2024-10-17T09:15:25.162188",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>embbedings</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>extra_beef</td>\n",
       "      <td>[tensor(0.5660), tensor(-0.1237), tensor(-0.73...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>egg</td>\n",
       "      <td>[tensor(0.4901), tensor(-0.1093), tensor(-0.63...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>breadcrumb</td>\n",
       "      <td>[tensor(0.5502), tensor(-0.1255), tensor(-0.73...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>parmesan_cheese</td>\n",
       "      <td>[tensor(0.0466), tensor(-0.3796), tensor(-0.61...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              name                                         embbedings\n",
       "0       extra_beef  [tensor(0.5660), tensor(-0.1237), tensor(-0.73...\n",
       "1              egg  [tensor(0.4901), tensor(-0.1093), tensor(-0.63...\n",
       "2       breadcrumb  [tensor(0.5502), tensor(-0.1255), tensor(-0.73...\n",
       "3  parmesan_cheese  [tensor(0.0466), tensor(-0.3796), tensor(-0.61..."
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "it_embeddings.head(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "44d78747",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:25.522039Z",
     "iopub.status.busy": "2024-10-17T09:15:25.521589Z",
     "iopub.status.idle": "2024-10-17T09:15:35.176073Z",
     "shell.execute_reply": "2024-10-17T09:15:35.174840Z"
    },
    "papermill": {
     "duration": 9.682852,
     "end_time": "2024-10-17T09:15:35.179080",
     "exception": false,
     "start_time": "2024-10-17T09:15:25.496228",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "def get_tuple_embedding(tup_name: str, ing_emb):\n",
    "    avg = None\n",
    "    for i in tup_name:\n",
    "        try:\n",
    "            avg += ing_emb['embbedings'][ing_emb['name'] == i].iloc[0]\n",
    "        except IndexError:\n",
    "            print(i)\n",
    "            avg = ing_emb.iloc[0].clone()\n",
    "        except:\n",
    "            avg = ing_emb['embbedings'][ing_emb['name'] == i].iloc[0].clone()\n",
    "    return avg/ len(tup_name)\n",
    "\n",
    "df_in['tuple_embedding'] = df_in.apply(lambda x: get_tuple_embedding(x['tuple'],in_embeddings), axis = 1)\n",
    "df_it['tuple_embedding'] = df_it.apply(lambda x: get_tuple_embedding(x['tuple'],it_embeddings), axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "65595778",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:35.228193Z",
     "iopub.status.busy": "2024-10-17T09:15:35.227728Z",
     "iopub.status.idle": "2024-10-17T09:15:35.768721Z",
     "shell.execute_reply": "2024-10-17T09:15:35.767717Z"
    },
    "papermill": {
     "duration": 0.568475,
     "end_time": "2024-10-17T09:15:35.771186",
     "exception": false,
     "start_time": "2024-10-17T09:15:35.202711",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>len</th>\n",
       "      <th>tuple</th>\n",
       "      <th>ratio</th>\n",
       "      <th>tuple_embedding</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>n_0_in</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(curry_leaf,)</td>\n",
       "      <td>0.999793</td>\n",
       "      <td>[tensor(-0.4261), tensor(0.3007), tensor(1.583...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>n_1_in</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(ginger_paste,)</td>\n",
       "      <td>0.999624</td>\n",
       "      <td>[tensor(-0.5259), tensor(0.2933), tensor(1.600...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>n_2_in</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(ginger_garlic_paste,)</td>\n",
       "      <td>0.999592</td>\n",
       "      <td>[tensor(-0.5331), tensor(0.2987), tensor(1.603...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>n_3_in</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(garam_masala_powder,)</td>\n",
       "      <td>0.999512</td>\n",
       "      <td>[tensor(-0.4905), tensor(0.2760), tensor(1.581...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>n_4_in</td>\n",
       "      <td>1.0</td>\n",
       "      <td>(black_mustard_seed,)</td>\n",
       "      <td>0.999503</td>\n",
       "      <td>[tensor(-0.5308), tensor(0.3043), tensor(1.602...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>n_3052_in</td>\n",
       "      <td>5.0</td>\n",
       "      <td>(salt, water, turmeric, garlic_clove, oil)</td>\n",
       "      <td>0.997067</td>\n",
       "      <td>[tensor(0.1734), tensor(0.0094), tensor(0.1264...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>n_3053_in</td>\n",
       "      <td>5.0</td>\n",
       "      <td>(salt, ginger, turmeric, oil, coriander)</td>\n",
       "      <td>0.997067</td>\n",
       "      <td>[tensor(-0.1115), tensor(0.1721), tensor(0.853...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>n_3054_in</td>\n",
       "      <td>5.0</td>\n",
       "      <td>(onion, ginger, turmeric, oil, coriander)</td>\n",
       "      <td>0.997067</td>\n",
       "      <td>[tensor(-0.2148), tensor(0.1827), tensor(0.964...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>n_3055_in</td>\n",
       "      <td>5.0</td>\n",
       "      <td>(turmeric, garlic_clove, oil, cumin, coriander)</td>\n",
       "      <td>0.996979</td>\n",
       "      <td>[tensor(-0.1342), tensor(0.1242), tensor(0.685...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>n_3056_in</td>\n",
       "      <td>5.0</td>\n",
       "      <td>(salt, turmeric, tomato, garlic_clove, oil)</td>\n",
       "      <td>0.996979</td>\n",
       "      <td>[tensor(0.2441), tensor(-0.0260), tensor(-0.08...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3057 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         name  len                                            tuple     ratio  \\\n",
       "0      n_0_in  1.0                                    (curry_leaf,)  0.999793   \n",
       "1      n_1_in  1.0                                  (ginger_paste,)  0.999624   \n",
       "2      n_2_in  1.0                           (ginger_garlic_paste,)  0.999592   \n",
       "3      n_3_in  1.0                           (garam_masala_powder,)  0.999512   \n",
       "4      n_4_in  1.0                            (black_mustard_seed,)  0.999503   \n",
       "..        ...  ...                                              ...       ...   \n",
       "95  n_3052_in  5.0       (salt, water, turmeric, garlic_clove, oil)  0.997067   \n",
       "96  n_3053_in  5.0         (salt, ginger, turmeric, oil, coriander)  0.997067   \n",
       "97  n_3054_in  5.0        (onion, ginger, turmeric, oil, coriander)  0.997067   \n",
       "98  n_3055_in  5.0  (turmeric, garlic_clove, oil, cumin, coriander)  0.996979   \n",
       "99  n_3056_in  5.0      (salt, turmeric, tomato, garlic_clove, oil)  0.996979   \n",
       "\n",
       "                                      tuple_embedding  \n",
       "0   [tensor(-0.4261), tensor(0.3007), tensor(1.583...  \n",
       "1   [tensor(-0.5259), tensor(0.2933), tensor(1.600...  \n",
       "2   [tensor(-0.5331), tensor(0.2987), tensor(1.603...  \n",
       "3   [tensor(-0.4905), tensor(0.2760), tensor(1.581...  \n",
       "4   [tensor(-0.5308), tensor(0.3043), tensor(1.602...  \n",
       "..                                                ...  \n",
       "95  [tensor(0.1734), tensor(0.0094), tensor(0.1264...  \n",
       "96  [tensor(-0.1115), tensor(0.1721), tensor(0.853...  \n",
       "97  [tensor(-0.2148), tensor(0.1827), tensor(0.964...  \n",
       "98  [tensor(-0.1342), tensor(0.1242), tensor(0.685...  \n",
       "99  [tensor(0.2441), tensor(-0.0260), tensor(-0.08...  \n",
       "\n",
       "[3057 rows x 5 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_in"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "455c0e4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:35.821574Z",
     "iopub.status.busy": "2024-10-17T09:15:35.821128Z",
     "iopub.status.idle": "2024-10-17T09:15:36.191113Z",
     "shell.execute_reply": "2024-10-17T09:15:36.190069Z"
    },
    "papermill": {
     "duration": 0.398649,
     "end_time": "2024-10-17T09:15:36.194049",
     "exception": false,
     "start_time": "2024-10-17T09:15:35.795400",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tuple_embeddings_in = {}    \n",
    "tuple_embeddings_it = {}\n",
    "for i, row in df_in.iterrows():\n",
    "    tuple_embeddings_in[row['name']] = row[\"tuple_embedding\"]\n",
    "    \n",
    "for i, row in df_it.iterrows():\n",
    "    tuple_embeddings_it[row['name']] = row[\"tuple_embedding\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d9704b7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:36.245404Z",
     "iopub.status.busy": "2024-10-17T09:15:36.244088Z",
     "iopub.status.idle": "2024-10-17T09:15:36.249426Z",
     "shell.execute_reply": "2024-10-17T09:15:36.248330Z"
    },
    "papermill": {
     "duration": 0.033709,
     "end_time": "2024-10-17T09:15:36.251966",
     "exception": false,
     "start_time": "2024-10-17T09:15:36.218257",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# torch.stack(df_in[df_in['len'] == i]['tuple_embedding'].to_list())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "5c38ad05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:36.302397Z",
     "iopub.status.busy": "2024-10-17T09:15:36.301367Z",
     "iopub.status.idle": "2024-10-17T09:15:36.331476Z",
     "shell.execute_reply": "2024-10-17T09:15:36.330469Z"
    },
    "papermill": {
     "duration": 0.058412,
     "end_time": "2024-10-17T09:15:36.334355",
     "exception": false,
     "start_time": "2024-10-17T09:15:36.275943",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "central_embeddings_in = {}\n",
    "central_embeddings_it = {}\n",
    "\n",
    "for i in range(1,6):\n",
    "    central_embeddings_in[i] = (torch.mean(torch.stack(df_in[df_in['len'] == i]['tuple_embedding'].to_list()),axis=0))\n",
    "\n",
    "for i in range(1,6):\n",
    "    central_embeddings_it[i] = (torch.mean(torch.stack(df_it[df_it['len'] == i]['tuple_embedding'].to_list()),axis=0))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "53d0fad9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:36.384282Z",
     "iopub.status.busy": "2024-10-17T09:15:36.383810Z",
     "iopub.status.idle": "2024-10-17T09:15:36.407872Z",
     "shell.execute_reply": "2024-10-17T09:15:36.406670Z"
    },
    "papermill": {
     "duration": 0.053014,
     "end_time": "2024-10-17T09:15:36.411493",
     "exception": false,
     "start_time": "2024-10-17T09:15:36.358479",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tensor([-0.2647,  0.2118,  1.1692,  0.6661, -0.1282,  0.2096,  0.5774, -0.0554,\n",
      "         0.1114, -0.4789, -1.0288, -0.1612, -0.4582,  0.5518,  0.9409,  0.6086,\n",
      "         0.0705, -0.0392,  0.4928,  0.5575,  0.0653,  0.3418,  0.2032, -0.6421,\n",
      "         0.1604, -0.6929, -0.3802,  0.6464, -0.5364, -0.3405, -0.0114,  0.5984,\n",
      "        -0.6444, -0.0805, -0.3733, -0.3737,  0.3618, -0.5934,  0.5382, -0.2390,\n",
      "         0.4650, -0.3931,  0.4496, -0.3892, -0.5229,  0.3742, -0.2864,  0.1106,\n",
      "        -0.5278, -0.8088,  0.3899, -0.6269,  0.6787, -0.2777, -0.1558,  0.5718,\n",
      "         0.3526, -0.5187,  0.2241, -0.1540,  0.0614, -0.5420,  0.4474,  0.4635,\n",
      "        -0.3359,  0.2779, -0.7342, -0.3824,  0.5217,  0.5689, -0.2885,  0.6166,\n",
      "         0.6082,  1.2464,  0.4869, -0.1584, -0.2030, -0.1457,  0.7765,  0.6698,\n",
      "        -0.8615, -0.2689, -0.3371,  0.5072,  0.2989, -0.5496,  0.4836, -0.0478,\n",
      "        -0.2834, -0.1661,  0.0605, -0.1047, -0.6205,  0.1892,  0.2353, -0.4056,\n",
      "         0.4298,  0.6468,  0.0989,  0.1180, -0.5659, -0.6511, -0.0969, -1.0236,\n",
      "         0.7425,  0.5446, -0.8482, -0.6369,  0.0122, -0.2030, -0.0553,  0.7740,\n",
      "        -0.8948,  0.2443, -0.6275, -0.1239,  0.0713,  0.7490,  0.2691, -0.3653,\n",
      "        -0.6572,  0.2068,  0.5877,  0.3623, -0.4097,  0.2586, -0.4265, -0.0624,\n",
      "         0.5481,  0.6539,  0.4769,  0.3386,  0.9333, -0.4220,  0.3574, -0.5564,\n",
      "         0.1881, -0.4697, -0.5164,  0.5864, -0.4561, -0.3948, -0.1578,  0.2323,\n",
      "        -0.0189, -0.2777, -0.4646,  0.3854, -0.9148,  0.4033, -0.1014,  0.6240,\n",
      "         0.0046, -0.0959, -0.2857,  0.1652, -0.5787,  0.4095, -0.5255,  0.3242,\n",
      "         0.6592,  0.7029,  0.0771, -0.4618, -0.3581, -0.2301,  0.0106,  0.4556,\n",
      "        -0.4599, -0.0116, -0.1756, -0.2669,  0.6429, -0.2803, -0.3745, -0.4785,\n",
      "         0.7902,  0.0554,  1.1118, -0.7266, -1.2486,  0.1546,  0.5350,  0.1489,\n",
      "        -0.4209, -0.5514,  0.3986,  0.5256,  0.1782, -0.0482,  0.2317, -0.3614,\n",
      "         0.6343, -0.5435,  0.6924,  0.0957, -0.4023, -0.6569, -0.2455,  0.8872,\n",
      "         0.5799,  0.4355,  0.2299, -0.5043, -1.0709,  0.5230, -0.4455, -0.0495,\n",
      "         0.5557, -0.2287, -0.3106,  0.1014, -0.1334, -0.7439, -0.2071, -0.4518,\n",
      "        -0.4476, -0.2815,  0.3578, -0.8171,  0.3183, -0.4275,  0.0306,  0.6295,\n",
      "         0.1167, -0.2929,  0.3510, -0.9653,  0.0160, -0.2007, -0.4961, -0.8747,\n",
      "        -0.0921,  0.0752, -0.8691, -0.1007,  0.3192, -0.3464,  0.4832, -0.1125,\n",
      "        -0.2887,  1.0370,  0.9237, -0.4192, -0.3490,  0.2050, -0.5551, -0.3435,\n",
      "        -0.6138, -0.9238, -0.4050, -0.6212, -0.1547, -0.0030, -0.3695, -0.8451,\n",
      "        -0.9062, -0.7368, -0.1147,  0.4386, -0.2244, -0.4455,  0.6968, -1.0834,\n",
      "        -0.0262, -1.2102, -0.4929, -1.0028, -0.1452,  0.5812,  0.2076, -0.4580,\n",
      "         0.2450, -0.2113,  0.3037, -0.7484,  0.4821,  0.3602, -0.7101,  0.1613,\n",
      "         0.1515,  0.0896,  0.2628,  0.4965, -0.1595, -0.0372, -0.1637, -0.2119,\n",
      "         0.4551, -0.5966,  0.3788, -0.3289,  0.2264, -0.5536,  0.5583, -0.9124,\n",
      "         0.5395,  0.2054,  0.1523, -0.1546,  0.1365,  0.4429, -0.6083, -0.0186,\n",
      "        -0.0932, -0.4810, -0.6441, -0.1209, -0.6325,  0.9145, -0.8160, -0.8466,\n",
      "        -1.0145, -0.4587,  0.4958, -0.0242,  0.0505,  0.2716, -0.3733,  0.3363,\n",
      "         0.0080, -0.3520, -0.1142, -0.3027,  0.1371,  0.2914, -0.3437,  0.3857,\n",
      "        -0.5396,  0.4859,  0.4109,  0.2831,  0.2807, -0.4824,  0.1683,  0.0372,\n",
      "        -0.6339,  0.2198, -0.9062, -0.3703, -0.7165,  0.4884,  0.0391,  0.0380,\n",
      "         0.5741, -0.1669, -0.8359,  0.4981,  0.6632, -0.4619,  0.6094, -0.5217,\n",
      "        -0.4691, -0.3644, -0.4907,  0.2570, -0.6278, -0.3419,  0.3283, -0.2501,\n",
      "         0.6073, -0.4801, -0.1582,  0.4717,  0.4261,  0.7936,  0.1658,  0.8712,\n",
      "        -0.1730,  0.2750, -0.4367, -1.1241,  0.4072, -0.2739, -0.2728,  0.1671,\n",
      "        -0.1066,  0.0048, -0.3210, -0.1108,  0.3321, -0.0102, -0.2322, -0.5146,\n",
      "         0.3870, -0.0549, -0.6361, -0.0908, -0.2695, -0.4081, -0.8896,  0.4002,\n",
      "         0.6022, -0.6595, -0.2152, -0.7218, -0.1701,  0.3194,  0.2831, -0.8611,\n",
      "         0.2583, -0.7035,  0.3858,  0.3739, -0.0767, -0.5652,  0.2687, -0.8527,\n",
      "        -0.1212, -0.0882, -0.3573, -0.3041, -0.3311, -0.8310,  0.4912,  0.1529,\n",
      "         0.6775,  1.2432, -0.4122, -0.2949, -0.3048, -0.5905,  0.5004,  0.2437,\n",
      "        -0.6238,  0.9281,  0.0619, -0.2864, -0.5554, -0.4089, -0.7946, -0.0867,\n",
      "        -0.8927,  0.8589,  0.5044,  0.6208,  0.6256, -0.2735, -0.3678,  0.2154,\n",
      "         0.2212, -0.0250, -0.5032,  0.3383, -0.0209, -0.4823,  0.6117, -0.3345,\n",
      "         0.5747,  0.0388, -0.1618,  0.3642, -0.3826,  0.5099, -0.3574,  0.2769,\n",
      "        -0.1585, -0.1767, -0.4458, -0.5520,  0.4933, -0.5882, -0.6107, -0.7063,\n",
      "        -0.3223,  0.0017, -0.1980,  0.3903, -0.5197, -0.2339, -0.4249, -0.5301,\n",
      "         0.3440,  0.8739,  0.6569, -0.2458, -0.4896,  0.1067,  0.5601, -1.0811,\n",
      "        -0.4344,  0.3460,  0.3355, -0.1385, -0.3672,  0.2487,  0.0976,  0.7126,\n",
      "        -0.0165, -0.2287,  0.2181,  0.0647,  0.2340,  0.3152,  0.1556, -0.3130,\n",
      "        -0.3581,  0.3380,  0.8628,  0.6015, -0.4354, -0.2091,  0.6895, -0.7903,\n",
      "         0.1603,  0.9788,  0.5132,  0.0384, -0.4081, -0.2855, -0.3242,  0.5439,\n",
      "         0.5171,  0.0329,  1.0176,  0.6741, -0.3821, -0.3107,  0.0644, -0.3435,\n",
      "         0.8165, -0.4837, -0.5340, -0.6209,  0.1135,  0.4803, -0.4621, -0.9163,\n",
      "         0.2912, -0.0223,  0.2297, -0.8964, -0.3821, -0.6002,  0.7584,  0.2082,\n",
      "        -0.1476,  0.1420, -0.1901,  0.5133,  0.5582,  0.8438, -0.1074, -0.5897,\n",
      "        -0.5136, -0.7286, -0.2485, -0.3242,  0.4262, -0.3630, -0.4846,  0.2630,\n",
      "        -0.9425, -0.1495, -0.7140,  1.1181, -0.3124,  0.5462,  0.3109,  0.3744,\n",
      "        -0.8158,  0.6145,  0.1337,  1.0257,  0.0627, -0.3421, -0.0473,  0.2337,\n",
      "        -0.5748,  0.7358, -0.5967,  0.8110,  0.0674,  0.5390, -0.4113,  0.2250,\n",
      "         0.2276,  0.5006,  0.3630,  0.0441, -0.5714,  0.2721, -0.0682, -0.8383,\n",
      "         0.2516,  0.3947,  0.3120, -0.6560,  0.2175, -0.6318,  1.0502,  0.3197,\n",
      "         0.0707,  0.1612,  0.0217, -0.3394, -0.2751,  0.3040,  0.8041,  0.4359,\n",
      "         0.3597, -0.1090, -0.2711,  0.4155,  0.3976,  0.5026, -0.2681, -0.5881,\n",
      "        -0.4301,  0.3948,  0.3544,  0.9681, -0.7625,  1.0174,  1.0428, -0.4033,\n",
      "        -0.2160, -0.1295,  0.3416,  0.8527,  0.1893, -0.1895, -0.8336, -0.1526,\n",
      "         0.2730, -0.0053, -0.4114, -0.3237,  0.6576, -0.2259,  0.7439, -0.4074,\n",
      "        -0.6401,  0.3558, -0.2333,  0.3767,  0.0850, -0.7230,  0.8637,  0.0252,\n",
      "        -0.8001,  0.2642,  0.5060,  0.2839, -0.3723,  0.3676, -0.6339,  0.5453,\n",
      "        -0.4833, -0.3717, -0.2602, -0.5960, -0.8374,  0.4490,  0.7345, -0.1967,\n",
      "         0.1737,  0.5240,  0.3225,  0.4329, -0.1609,  0.3598,  0.0547, -0.0980,\n",
      "        -0.1544,  0.6658,  0.5438, -0.2819,  0.1718,  0.8874,  0.7645,  0.5797,\n",
      "        -0.7002, -0.3295,  0.7428, -0.6134, -0.3392, -0.0474, -0.2681,  0.2653,\n",
      "        -0.3648,  0.2373, -0.3605, -0.4514, -0.6449,  0.2843,  0.6014,  0.7463,\n",
      "        -0.3035, -0.4113,  0.4312, -0.0710,  0.6820,  0.3670, -0.5672,  0.6725,\n",
      "         0.3366,  0.5355, -0.2063, -1.1133,  0.1594,  0.5630, -0.8524, -0.3268,\n",
      "        -0.1314, -0.7031,  0.4245,  0.3717, -0.1520,  0.2809, -0.0201,  1.1298,\n",
      "         1.1543,  0.7485, -1.1859, -0.0977, -0.0391, -0.3947, -0.1961,  0.1212,\n",
      "        -0.6246,  0.5919,  0.1412, -0.7805, -0.6039,  0.2878,  0.5910, -0.9791,\n",
      "         0.0893,  0.2386, -0.0432, -0.0092,  0.4253,  0.1942,  0.0142, -0.2110,\n",
      "        -0.6601,  0.7772,  0.1850,  0.5253, -0.1323, -0.5638, -0.0143,  0.6275,\n",
      "         0.2182,  0.6257, -0.6833,  0.4776,  0.2719, -0.8526,  0.5363,  0.0708,\n",
      "        -0.3392, -0.8692, -0.2540,  0.3382, -0.6513,  0.2419, -0.5422,  0.7809,\n",
      "         0.4566,  0.3385,  0.6625,  0.4252, -0.1270, -0.4315, -0.2255, -0.1698]) tensor([ 1.0874e-01, -1.6353e-01, -2.2072e-01, -3.6461e-01, -3.5801e-01,\n",
      "         3.0552e-02,  2.4303e-01,  2.0215e-01, -6.4060e-02,  2.4201e-01,\n",
      "         2.5999e-02, -1.9454e-01,  2.0690e-02,  3.4517e-01, -2.6124e-02,\n",
      "        -5.9093e-01,  7.1767e-01, -1.4503e-01,  1.1258e-01, -1.2796e-01,\n",
      "         3.5279e-01, -2.8051e-01, -2.3629e-01,  2.8509e-01,  1.5388e-01,\n",
      "         2.6361e-01,  8.5326e-01, -2.9160e-01,  4.1029e-01, -2.2101e-01,\n",
      "        -2.4317e-01, -1.0546e-01,  2.2797e-01, -1.8630e-01,  5.2434e-01,\n",
      "         3.6730e-01, -4.4749e-01,  1.1804e-01, -5.7542e-01,  4.5711e-01,\n",
      "        -6.1703e-01,  5.0765e-01, -1.6627e-02,  5.7083e-01,  2.8557e-01,\n",
      "        -6.7264e-01, -6.2034e-02,  4.5598e-02, -1.2593e-01,  5.9118e-01,\n",
      "        -6.2443e-01,  7.2512e-02,  1.9166e-02,  2.8399e-01,  1.0431e-01,\n",
      "         2.3559e-01, -8.0324e-03,  1.1128e-01, -2.1541e-01,  8.2038e-01,\n",
      "        -1.7174e-01,  3.5641e-01, -3.6533e-01, -6.2043e-01, -3.1930e-02,\n",
      "        -1.6424e-01,  4.8297e-01,  8.9210e-01, -7.5280e-01, -3.1631e-01,\n",
      "         1.4033e-01, -3.4674e-01,  2.4643e-01, -5.1236e-01, -5.3615e-01,\n",
      "         2.1360e-01,  5.6031e-01,  1.8632e-01,  1.1077e-03, -2.1932e-01,\n",
      "         7.5309e-01,  2.5903e-01,  1.7631e-01, -1.0012e-01,  3.8213e-01,\n",
      "         1.9995e-01, -3.0648e-01, -6.1185e-01, -1.9145e-01,  1.1536e-01,\n",
      "        -2.6561e-01, -2.0543e-01,  7.4183e-01, -1.8000e-01,  9.6669e-02,\n",
      "         2.8208e-02, -2.2535e-01,  8.6533e-02,  4.9048e-02,  2.3771e-01,\n",
      "        -8.1686e-02,  1.7183e-01, -4.9162e-02,  6.3775e-01, -8.8057e-02,\n",
      "        -4.2555e-01,  2.7160e-01, -4.4498e-01, -4.8863e-01,  2.4645e-02,\n",
      "        -2.4207e-01, -7.2131e-01,  2.4852e-01,  1.2902e-01,  1.9871e-01,\n",
      "         7.5939e-01,  3.2391e-02, -3.0202e-01, -4.7448e-01,  2.4626e-01,\n",
      "         3.6107e-01, -5.4033e-02, -4.2156e-01,  1.5265e-01, -5.5917e-01,\n",
      "        -2.1755e-01,  4.3332e-01,  3.5390e-01,  1.2202e-01, -1.5653e-01,\n",
      "        -6.6457e-01,  2.7541e-01, -9.8854e-02,  5.1715e-02, -1.8045e-01,\n",
      "        -2.1903e-01,  2.7805e-01,  3.0498e-01,  2.2044e-01, -3.1343e-01,\n",
      "        -2.1002e-01, -2.0697e-01, -2.3362e-01, -3.4819e-01,  2.4209e-01,\n",
      "         1.7068e-01,  5.6630e-01, -1.8216e-01,  2.6599e-01, -2.4635e-01,\n",
      "         2.5011e-01, -4.6473e-01,  2.7855e-01, -1.1134e-02,  1.2192e-01,\n",
      "        -1.9840e-01,  3.1435e-01, -2.7478e-01,  4.0339e-01, -9.0542e-02,\n",
      "         7.6897e-03, -5.1472e-01,  3.0606e-01,  3.6216e-01, -1.5819e-01,\n",
      "         4.6761e-02,  2.0790e-02, -1.3796e-01,  2.2504e-01,  2.7097e-01,\n",
      "        -6.8197e-01,  1.7560e-01, -1.3431e-01, -2.3281e-01,  5.1844e-01,\n",
      "         5.9084e-02, -4.5206e-01, -6.7027e-02, -6.6837e-01,  5.0017e-01,\n",
      "        -1.3696e+00,  5.1378e-01,  2.7170e-02,  2.3459e-02,  1.8481e-01,\n",
      "        -2.7915e-01, -1.4736e-01, -6.1183e-01, -5.1760e-01,  3.9609e-01,\n",
      "        -3.3520e-01, -5.8403e-02,  1.4315e-01,  5.1348e-01, -7.3518e-02,\n",
      "         1.6185e-01,  6.7310e-03,  5.5064e-01,  1.8585e-02,  1.0182e-01,\n",
      "        -5.3880e-01, -3.2918e-01, -3.5179e-01,  7.0469e-01,  4.8555e-02,\n",
      "        -8.5221e-02,  7.1342e-01, -3.4650e-01, -8.1427e-02,  2.6750e-01,\n",
      "         2.4879e-01, -4.9696e-01,  1.0950e-01,  3.6012e-01,  2.0922e-01,\n",
      "        -2.4294e-01, -2.5116e-02,  1.1903e-01, -3.5406e-01,  4.1095e-01,\n",
      "        -4.4389e-02,  1.8339e-02, -2.4497e-01, -7.9548e-02, -2.3579e-01,\n",
      "        -2.6130e-01, -2.3596e-01,  2.6337e-01, -2.0332e-01,  3.2671e-01,\n",
      "         3.2631e-01,  6.0322e-01,  4.2619e-01, -2.4645e-01,  5.0498e-01,\n",
      "         2.9953e-01, -6.3019e-01, -1.9436e-01,  7.4281e-03, -4.5289e-01,\n",
      "         1.2995e-01, -1.7435e-01, -4.8840e-01,  5.0675e-01, -2.4660e-02,\n",
      "        -1.9970e-01,  2.7661e-01,  4.3981e-01,  1.8752e-01,  2.0197e-01,\n",
      "        -1.7384e-01,  1.4871e-01,  4.6956e-02, -4.8397e-01,  1.7807e-01,\n",
      "         3.8717e-01,  3.6835e-01,  6.6546e-01,  6.7594e-01, -2.7477e-01,\n",
      "        -1.8790e-01,  4.7762e-01,  5.6505e-01,  3.1350e-01, -4.5963e-01,\n",
      "        -1.1149e-01,  2.6154e-02,  3.7591e-01, -1.1625e-01, -1.5971e-01,\n",
      "        -1.0627e-01,  2.1583e-02, -3.4176e-01, -4.8830e-01, -1.4851e-01,\n",
      "         2.8236e-01, -9.2084e-02, -5.8456e-02, -3.6921e-01, -2.8492e-01,\n",
      "        -7.4742e-02,  6.4364e-01, -3.1984e-01, -1.6204e-01, -2.8383e-01,\n",
      "         3.5496e-02,  2.2785e-01,  3.6132e-01, -6.7111e-01,  4.6566e-02,\n",
      "        -3.2398e-01,  3.5431e-01, -3.3480e-01,  2.7097e-01, -2.5465e-01,\n",
      "         1.9171e-01, -5.2265e-01, -2.2445e-01, -3.9555e-02, -2.6576e-01,\n",
      "        -6.8909e-01, -1.7300e-01, -1.6547e-01, -3.6285e-02, -1.3705e-01,\n",
      "         3.9047e-01,  3.8968e-02,  3.1299e-02,  3.6586e-02, -3.1152e-01,\n",
      "         2.8133e-01,  2.5184e-01,  4.3549e-01,  2.5492e-01, -1.7266e-01,\n",
      "        -2.2130e-01, -1.4196e-01, -1.4656e-01,  1.4461e-01, -4.2014e-01,\n",
      "        -7.0284e-03,  3.5050e-01, -5.0426e-01,  8.9888e-01,  2.3714e-01,\n",
      "        -9.4359e-02, -8.2266e-02,  1.3676e-02,  1.8333e-01, -4.4928e-01,\n",
      "        -5.8758e-01, -4.5558e-01,  1.9192e-01,  4.4455e-01,  2.3597e-02,\n",
      "         2.1273e-01,  3.0435e-01, -3.9243e-02, -8.0803e-02,  5.2997e-01,\n",
      "         7.7938e-02, -5.4823e-01,  5.3934e-03, -1.5542e-01,  6.5817e-02,\n",
      "         3.7830e-01,  3.4727e-01, -3.9748e-01, -5.5803e-01,  8.5757e-02,\n",
      "        -8.3099e-01,  5.6497e-01, -6.5870e-02,  3.4292e-01, -2.3372e-01,\n",
      "         1.4074e-01,  2.0839e-01,  4.2746e-01,  4.7407e-02,  2.2465e-01,\n",
      "        -1.1780e-01,  4.2221e-01, -1.8195e-01, -2.8407e-01, -8.0240e-02,\n",
      "        -2.0495e-02, -3.9370e-01, -4.0401e-01,  3.9165e-01, -1.4311e-01,\n",
      "         6.4702e-01,  5.7713e-01,  1.7591e-02, -2.4000e-03,  1.2378e-02,\n",
      "        -2.8919e-01, -1.6521e-01,  8.3483e-02,  5.7957e-01, -1.5369e-01,\n",
      "        -3.6093e-01,  2.0353e-01,  1.8909e-01,  1.6064e-01, -1.1835e-01,\n",
      "        -2.0688e-01,  3.2802e-01, -2.1196e-01,  1.5527e-01,  2.1942e-01,\n",
      "        -9.2507e-02,  3.5615e-01, -9.8022e-02, -2.7917e-02,  4.8143e-01,\n",
      "         5.8740e-01, -2.5649e-01, -1.8869e-01,  1.3335e-01,  2.9643e-01,\n",
      "        -1.7057e-01,  2.8737e-01, -5.2942e-01,  5.4785e-01,  4.9408e-01,\n",
      "        -1.0889e-01, -3.9458e-01,  2.6042e-01, -1.2223e-01, -2.6488e-01,\n",
      "         2.7086e-01,  3.8209e-02,  2.7050e-01,  4.4078e-01, -3.6001e-01,\n",
      "        -3.9361e-01, -8.8195e-01, -9.2760e-01,  5.9741e-02, -1.9313e-01,\n",
      "         6.2203e-01,  2.9470e-01, -5.2649e-01, -2.6699e-01,  2.0445e-01,\n",
      "         8.2126e-02,  1.0053e-01, -2.2997e-03,  3.2276e-02,  2.3926e-01,\n",
      "         1.0995e-01, -2.9869e-01,  6.3939e-02, -2.4201e-01,  1.9954e-01,\n",
      "        -2.5018e-01, -1.1246e-01,  2.1848e-02,  2.7181e-01, -2.0340e-01,\n",
      "        -3.2499e-01, -2.6810e-01,  8.6680e-03, -4.5789e-01, -4.6732e-01,\n",
      "         1.6505e-01,  5.3967e-02,  1.2032e-01, -4.6056e-01,  5.1743e-02,\n",
      "        -3.8464e-02, -3.2799e-01,  1.6246e-01,  3.0951e-01,  3.2423e-01,\n",
      "        -7.5569e-01, -8.6793e-02,  1.9093e-01,  1.2606e-02,  1.2085e-01,\n",
      "        -1.9945e-01, -3.9665e-01,  8.3505e-02,  2.7250e-01,  4.1192e-01,\n",
      "         6.2942e-01, -3.6832e-02, -6.2183e-01, -1.4952e-01, -1.1407e-01,\n",
      "         2.4547e-01,  3.9510e-01, -3.7151e-01, -4.6964e-01, -1.6480e-01,\n",
      "        -1.2674e-01, -3.1990e-02,  2.1687e-01, -4.3903e-01,  4.9723e-01,\n",
      "        -1.1448e-01, -3.0976e-01,  2.0538e-01,  2.6186e-01,  1.7921e-02,\n",
      "        -4.6271e-01, -1.5499e-01, -2.6345e-01,  3.4506e-01, -4.0196e-01,\n",
      "        -2.9493e-01, -3.8749e-02, -4.2528e-02, -6.2527e-02,  9.4234e-02,\n",
      "         5.8015e-01,  3.6255e-01, -4.3951e-01, -1.1456e-01, -2.6166e-01,\n",
      "         4.8782e-02, -1.9564e-01, -7.2830e-01,  2.7753e-01, -1.7401e-01,\n",
      "        -2.9404e-01,  3.1827e-01, -3.6678e-01,  3.4529e-01,  3.8768e-01,\n",
      "         2.2833e-01, -4.0023e-02,  2.1886e-01, -1.4218e-01, -2.4453e-01,\n",
      "         4.6084e-03,  3.2043e-02,  2.2585e-01, -1.9886e-01,  3.3807e-02,\n",
      "        -5.0514e-01,  3.7931e-01,  2.3330e-01,  2.0267e-01, -2.7479e-02,\n",
      "        -3.8138e-01,  4.5485e-01,  2.0113e-02, -3.3204e-01, -6.0008e-01,\n",
      "        -5.1012e-01,  2.6492e-01, -1.9153e-01,  2.4564e-01, -5.6325e-01,\n",
      "        -4.3750e-01,  1.3056e-01, -1.7665e-01, -2.5523e-01, -3.9131e-02,\n",
      "         9.3555e-02, -2.9595e-01,  4.3037e-01,  3.8820e-01,  1.2296e-01,\n",
      "         2.1301e-01,  1.5908e-01,  4.4360e-01, -4.4269e-01, -7.9105e-02,\n",
      "         4.1470e-01, -5.0039e-01,  7.3850e-02, -4.8253e-03,  7.2071e-01,\n",
      "        -1.0487e-01,  9.9564e-02, -5.0451e-01, -5.3446e-01, -1.3175e-01,\n",
      "        -2.2558e-01, -2.1871e-01,  1.4526e-01, -6.0374e-01,  1.4344e-01,\n",
      "        -8.9206e-02,  4.0426e-02, -1.5347e-01,  4.9842e-01, -5.1355e-01,\n",
      "         2.2002e-02,  1.5605e-01, -3.3305e-02, -3.2329e-01,  5.9845e-01,\n",
      "        -1.7486e-01,  1.4900e-01, -9.2906e-02, -4.2281e-01, -2.9514e-01,\n",
      "         1.4607e-01,  1.6129e-01, -2.1218e-01,  5.2111e-02,  8.7348e-01,\n",
      "        -3.9276e-01, -3.3118e-01, -1.6792e-02, -2.2908e-01,  7.8800e-01,\n",
      "        -5.2828e-01, -6.4222e-01,  2.2139e-01, -1.6465e-01,  3.3912e-02,\n",
      "         5.7208e-02,  9.6559e-02, -3.5220e-01, -4.9268e-02, -2.6394e-01,\n",
      "        -3.0639e-01,  2.2518e-01, -6.3769e-01, -1.0265e-01, -2.7734e-01,\n",
      "        -1.6499e-01,  1.6324e-01,  5.2816e-01, -1.9137e-01, -3.8870e-03,\n",
      "        -5.8721e-01, -5.1248e-02,  4.3212e-01, -4.4293e-01, -3.0606e-01,\n",
      "         3.9622e-01, -2.4552e-01,  4.4225e-01, -4.8606e-01, -1.9294e-01,\n",
      "        -2.9340e-01,  6.1364e-01,  6.3394e-02,  1.5978e-01, -4.5308e-01,\n",
      "        -9.0459e-02,  6.5274e-01,  4.4432e-01, -4.9125e-01, -4.8097e-01,\n",
      "        -4.5497e-01,  3.4205e-01,  5.4813e-01,  4.0104e-01, -3.3050e-01,\n",
      "        -1.9118e-01,  4.2539e-01,  2.9866e-01, -3.1233e-01,  3.2796e-02,\n",
      "         2.6349e-01, -1.6618e-02, -5.0991e-01, -3.5022e-02,  4.7621e-01,\n",
      "        -1.5640e-02, -3.2742e-02,  3.8873e-02,  2.0562e-01,  2.9812e-01,\n",
      "        -1.9172e-01,  3.9699e-02, -4.6798e-03, -1.5543e-01, -4.8492e-01,\n",
      "        -3.2695e-01, -2.7744e-01, -2.7635e-01, -1.6012e-01, -1.4962e-01,\n",
      "         1.6940e-01,  1.5834e-01,  1.6205e-01,  7.2805e-02, -5.1731e-02,\n",
      "        -5.9187e-01, -3.3275e-01, -2.2514e-01, -3.0835e-01, -4.4889e-01,\n",
      "        -2.7637e-01,  8.4605e-02,  1.0984e-01,  2.0184e-01, -3.8440e-01,\n",
      "         2.2625e-01,  4.3844e-01,  5.9494e-01,  1.7956e-01, -2.0412e-02,\n",
      "         4.7717e-01, -3.2483e-01,  5.7434e-01,  1.9863e-01,  2.2380e-01,\n",
      "        -3.6729e-01, -4.8077e-01, -6.4384e-01,  5.0011e-01,  2.7989e-01,\n",
      "        -3.7901e-01, -3.2611e-01, -6.9695e-01, -2.5211e-01, -4.0017e-01,\n",
      "         5.6545e-02,  4.0593e-01, -2.9488e-01,  3.9826e-01,  3.5252e-01,\n",
      "        -4.2516e-01, -5.3046e-01,  3.1243e-01,  2.3367e-01,  1.3389e-01,\n",
      "         4.0700e-01,  5.5194e-02, -1.6806e-01,  3.1040e-01,  4.8982e-01,\n",
      "        -3.5029e-01, -1.4350e-01, -6.7944e-01, -2.0465e-01,  9.4974e-02,\n",
      "         1.6584e-01, -9.2404e-02,  2.7658e-01, -3.9905e-01, -1.7815e-01,\n",
      "        -3.4570e-01, -1.7756e-01, -1.2957e-01,  4.6884e-02,  6.0576e-01,\n",
      "        -4.2422e-01, -4.9500e-01,  1.4615e-01,  3.1083e-01, -4.9322e-01,\n",
      "         1.4812e-01,  7.1349e-02, -6.8208e-01,  3.4582e-01, -2.1388e-01,\n",
      "         1.2138e-01,  2.4241e-01, -2.5945e-01, -2.2228e-01, -1.4093e-01,\n",
      "         7.0754e-02,  8.7292e-03, -2.2799e-01, -7.3609e-01,  6.4947e-02,\n",
      "         3.7272e-01,  2.4743e-01, -3.6256e-01,  6.8406e-02, -2.8735e-02,\n",
      "         2.9955e-01,  1.8889e-01, -9.0519e-01,  2.5557e-03, -4.9270e-01,\n",
      "        -5.5681e-01,  5.7942e-01, -3.0288e-03,  3.1765e-01, -7.6418e-01,\n",
      "        -4.4835e-01, -3.5660e-01, -4.7454e-01, -2.1118e-01,  2.0400e-01,\n",
      "        -4.6675e-02,  1.7935e-01,  1.8888e-01])\n"
     ]
    }
   ],
   "source": [
    "print(central_embeddings_in[1],central_embeddings_it[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "96ffce32",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45158155",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "5c64b8a5",
   "metadata": {
    "papermill": {
     "duration": 0.024405,
     "end_time": "2024-10-17T09:15:36.460952",
     "exception": false,
     "start_time": "2024-10-17T09:15:36.436547",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Use Model to check transformation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "12da4a4e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:36.512104Z",
     "iopub.status.busy": "2024-10-17T09:15:36.511646Z",
     "iopub.status.idle": "2024-10-17T09:15:36.532226Z",
     "shell.execute_reply": "2024-10-17T09:15:36.531192Z"
    },
    "papermill": {
     "duration": 0.049547,
     "end_time": "2024-10-17T09:15:36.535113",
     "exception": false,
     "start_time": "2024-10-17T09:15:36.485566",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from torch.nn.functional import cosine_similarity\n",
    "# from sklearn.metrics.pairwise import cosine_similarity\n",
    "import torch\n",
    "df_temp = df_it[['name','tuple_embedding']]\n",
    "ItalianKNN = []\n",
    "for i in range(1,6):\n",
    "\n",
    "    df_it_fin_i = df_it[df_it[\"len\"] == i]\n",
    "#     print(df_it_fin_i['tuple_embedding'])\n",
    "    ItalianKNN.append({\n",
    "        \"data\": torch.stack(df_it_fin_i['tuple_embedding'].to_list()),\n",
    "        \"label\": torch.tensor(df_it_fin_i[\"name\"].apply(lambda x: code_int_mapping_it[x]))\n",
    "    })"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f4eb295d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:36.586189Z",
     "iopub.status.busy": "2024-10-17T09:15:36.585745Z",
     "iopub.status.idle": "2024-10-17T09:15:36.594041Z",
     "shell.execute_reply": "2024-10-17T09:15:36.592723Z"
    },
    "papermill": {
     "duration": 0.03724,
     "end_time": "2024-10-17T09:15:36.596945",
     "exception": false,
     "start_time": "2024-10-17T09:15:36.559705",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def __knn_predict(test_point,knn):\n",
    "#     print(knn[\"data\"].shape,test_point.shape)\n",
    "#     distances = torch.cosine_similarity(knn[\"data\"], test_point, dim=1)\n",
    "    distances = torch.norm(knn[\"data\"]-  test_point, dim=1)\n",
    "    s, nearest_neighbors = torch.topk(distances, 1, largest=True)\n",
    "    neighbor_labels = knn[\"label\"][nearest_neighbors]\n",
    "    \n",
    "    predicted_label = torch.mode(neighbor_labels).values.item() \n",
    "    \n",
    "    return predicted_label, s\n",
    "\n",
    "def knn_predict(test_point,cluster_level):\n",
    "    x,y  = __knn_predict(test_point,ItalianKNN[cluster_level-1],)\n",
    "    return int_code_mapping_it[x], y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "729fb34b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:36.649056Z",
     "iopub.status.busy": "2024-10-17T09:15:36.648605Z",
     "iopub.status.idle": "2024-10-17T09:15:36.684154Z",
     "shell.execute_reply": "2024-10-17T09:15:36.682934Z"
    },
    "papermill": {
     "duration": 0.064622,
     "end_time": "2024-10-17T09:15:36.686828",
     "exception": false,
     "start_time": "2024-10-17T09:15:36.622206",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "('n_2042_it', tensor([13.3161]))"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "knn_predict(df_it_fin_i['tuple_embedding'].to_list()[11],5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "566f619e",
   "metadata": {
    "papermill": {
     "duration": 0.02467,
     "end_time": "2024-10-17T09:15:36.736147",
     "exception": false,
     "start_time": "2024-10-17T09:15:36.711477",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "bert model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "d5b05c4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:36.789430Z",
     "iopub.status.busy": "2024-10-17T09:15:36.789021Z",
     "iopub.status.idle": "2024-10-17T09:15:36.819479Z",
     "shell.execute_reply": "2024-10-17T09:15:36.818295Z"
    },
    "papermill": {
     "duration": 0.061512,
     "end_time": "2024-10-17T09:15:36.822471",
     "exception": false,
     "start_time": "2024-10-17T09:15:36.760959",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_17/239794924.py:27: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n",
      "  model = torch.load(\"/kaggle/input/ind_ita/pytorch/default/1/ind_ita.pt\")\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "no_classes = 2\n",
    "no_ingredients =768  # number of unique ings for 5 classes\n",
    "hidden_layer = int(math.sqrt(no_classes*no_ingredients))\n",
    "\n",
    "class MLP(nn.Module):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.layers = nn.Sequential(\n",
    "            nn.Linear(no_ingredients, hidden_layer),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(hidden_layer, no_classes)\n",
    "        )\n",
    "    def forward(self, x):\n",
    "        '''Forward pass'''\n",
    "        x=torch.squeeze(x).float()\n",
    "        x=self.layers(x)\n",
    "        return x\n",
    "\n",
    "\n",
    "\n",
    "model = MLP()\n",
    "model = torch.load(\"/kaggle/input/ind_ita/pytorch/default/1/ind_ita.pt\")\n",
    "def check_transformation_bert(model: MLP, old_ing: list,new_ing: list,label_old:str=\"\",label_new:str=\"\"): \n",
    "    # works\n",
    "    model.eval()\n",
    "    inp= torch.mean(torch.stack([raw_embedding_map[i] for i in old_ing]),axis=0)\n",
    "    inp2= torch.mean(torch.stack([raw_embedding_map[i] for i in new_ing]),axis=0)\n",
    "    pred=model(torch.stack([inp,inp2]))\n",
    "    _, predicted = torch.max(pred.data, 1)\n",
    "    if(predicted[0] == predicted[1]): # this might be wrong\n",
    "        return False\n",
    "    return True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "c4f20c1b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:36.875576Z",
     "iopub.status.busy": "2024-10-17T09:15:36.875107Z",
     "iopub.status.idle": "2024-10-17T09:15:36.882845Z",
     "shell.execute_reply": "2024-10-17T09:15:36.881484Z"
    },
    "papermill": {
     "duration": 0.037599,
     "end_time": "2024-10-17T09:15:36.885352",
     "exception": false,
     "start_time": "2024-10-17T09:15:36.847753",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MLP(\n",
       "  (layers): Sequential(\n",
       "    (0): Linear(in_features=768, out_features=39, bias=True)\n",
       "    (1): ReLU()\n",
       "    (2): Linear(in_features=39, out_features=2, bias=True)\n",
       "  )\n",
       ")"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "06339ac9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:36.943229Z",
     "iopub.status.busy": "2024-10-17T09:15:36.942542Z",
     "iopub.status.idle": "2024-10-17T09:15:36.973253Z",
     "shell.execute_reply": "2024-10-17T09:15:36.972149Z"
    },
    "papermill": {
     "duration": 0.065131,
     "end_time": "2024-10-17T09:15:36.975949",
     "exception": false,
     "start_time": "2024-10-17T09:15:36.910818",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "check_transformation_bert(model,train_it[\"ingredients\"].iloc[0],train_in[\"ingredients\"].iloc[4],\"\",\"\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "71bdea29",
   "metadata": {
    "papermill": {
     "duration": 0.025117,
     "end_time": "2024-10-17T09:15:37.027313",
     "exception": false,
     "start_time": "2024-10-17T09:15:37.002196",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### write code for combination generation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "e9b97d7c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:37.081048Z",
     "iopub.status.busy": "2024-10-17T09:15:37.080456Z",
     "iopub.status.idle": "2024-10-17T09:15:37.098965Z",
     "shell.execute_reply": "2024-10-17T09:15:37.097575Z"
    },
    "papermill": {
     "duration": 0.049111,
     "end_time": "2024-10-17T09:15:37.102243",
     "exception": false,
     "start_time": "2024-10-17T09:15:37.053132",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 5/5 [00:00<00:00, 14305.27it/s]\n"
     ]
    }
   ],
   "source": [
    "comb_list = { # TODO write algorithm for automatic comb generation\n",
    "    5: [[5],[4,1],[3,2],[3,1,1],[2,2,1],[2,1,1,1],[1,1,1,1,1]],\n",
    "    4: [[4],[3,1],[2,2],[2,1,1],[1,1,1,1]],\n",
    "    3: [[3],[2,1],[1,1,1]],\n",
    "    2: [[2],[1,1]],\n",
    "    1: [[1]]\n",
    "}\n",
    "\n",
    "from tqdm import tqdm\n",
    "def lsearch(listr: list,x: int):\n",
    "    for i in range(len(listr)):\n",
    "        if(x >= listr[i][0]):\n",
    "            return i\n",
    "        \n",
    "    \n",
    "def gen_combinations(n:int):\n",
    "    for i in tqdm(range(6,n+1)):\n",
    "        onx = []\n",
    "        for j in range(0,5):\n",
    "            ind = lsearch(comb_list[i-(5-j)],5-j)\n",
    "            for k in range(ind,len(comb_list[i-(5-j)])):\n",
    "                temp = [5-j]\n",
    "                temp.extend(comb_list[i-(5-j)][k])\n",
    "                onx.append(temp)\n",
    "        comb_list[i] = onx       \n",
    "\n",
    "gen_combinations(10) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "34446888",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:37.157148Z",
     "iopub.status.busy": "2024-10-17T09:15:37.156686Z",
     "iopub.status.idle": "2024-10-17T09:15:37.163814Z",
     "shell.execute_reply": "2024-10-17T09:15:37.162493Z"
    },
    "papermill": {
     "duration": 0.037769,
     "end_time": "2024-10-17T09:15:37.166390",
     "exception": false,
     "start_time": "2024-10-17T09:15:37.128621",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "474\n"
     ]
    }
   ],
   "source": [
    "s = 0\n",
    "for i in comb_list.values():\n",
    "    for j in i:\n",
    "        s+= len(j)\n",
    "print(s)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1440953b",
   "metadata": {
    "papermill": {
     "duration": 0.025909,
     "end_time": "2024-10-17T09:15:37.218338",
     "exception": false,
     "start_time": "2024-10-17T09:15:37.192429",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### write code for optimal threshold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "b3d3400a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:37.273492Z",
     "iopub.status.busy": "2024-10-17T09:15:37.272494Z",
     "iopub.status.idle": "2024-10-17T09:15:37.287106Z",
     "shell.execute_reply": "2024-10-17T09:15:37.285948Z"
    },
    "papermill": {
     "duration": 0.045264,
     "end_time": "2024-10-17T09:15:37.289677",
     "exception": false,
     "start_time": "2024-10-17T09:15:37.244413",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_tuples_in_list(ing_list: list[str], tuple_to_code: dict): # correct implementation\n",
    "    ing_cache = set(ing_list)\n",
    "    tup_list = {\n",
    "        1: [],\n",
    "        2: [],\n",
    "        3: [],\n",
    "        4: [],\n",
    "        5: []\n",
    "    }\n",
    "    for i in tuple_to_code.keys():\n",
    "        temp = True\n",
    "        for j in i:\n",
    "            if j not in ing_cache:\n",
    "                temp = False\n",
    "                break;\n",
    "        if temp:\n",
    "            tup_list[len(i)].append(tuple_to_code[i])\n",
    "    return tup_list\n",
    "\n",
    "requirement = {\n",
    "        1:2,\n",
    "        2:1,\n",
    "        3:0,\n",
    "        4:1,\n",
    "        5:0\n",
    "    }\n",
    "sorted_tuplist = {\n",
    "         1: [],\n",
    "         2: [],\n",
    "         3: [],\n",
    "         4: [],\n",
    "         5: []\n",
    "    }\n",
    "\n",
    "def cluster_selection_stratergy1(tuple_list, cluster_level):\n",
    "    ratio_list = []\n",
    "    name_list  = []\n",
    "    for i in tuple_list.keys():\n",
    "        if i > cluster_level:\n",
    "            break;\n",
    "        for j in tuple_list[i]:\n",
    "            temp = df_in[df_in[\"name\"] == j]\n",
    "            ratio_list.append(temp[\"ratio\"].iloc[0])\n",
    "            name_list.append(j)\n",
    "    tr =  np.array(ratio_list)\n",
    "    tn =  np.array(name_list)\n",
    "    del ratio_list, name_list\n",
    "    name_list = tn[np.argsort(tr)[::-1]]\n",
    "    del tr, tn\n",
    "    return name_list\n",
    "\n",
    "# def cluster_selection_stratergy2(tuple_list,cluster_level):\n",
    "#     sorted_tuplist = {\n",
    "#     }\n",
    "#     for i in tuple_list.keys():\n",
    "#         ratio_list = []\n",
    "#         name_list  = []\n",
    "#         if i > cluster_level:\n",
    "#             break;\n",
    "#         for j in tuple_list[i]:\n",
    "#             temp = df_in[df_in[\"name\"] == j]\n",
    "#             ratio_list.append(temp[\"ratio\"].iloc[0])\n",
    "#             name_list.append(j)\n",
    "#         tr =  np.array(ratio_list)\n",
    "#         tn =  np.array(name_list)\n",
    "#         del ratio_list, name_list\n",
    "#         name_list = tn[np.argsort(tr)[::-1]]\n",
    "#         del tr, tn\n",
    "#         sorted_tuplist[i] = name_list\n",
    "  \n",
    "#     for i in range(1,11):\n",
    "#         found_one_list = True\n",
    "#         for j in comb_list[i]:\n",
    "#             cache = set()\n",
    "#             name_list = []\n",
    "#             srt_ind = {\n",
    "#                 1:0,2:0,3:0,4:0,5:0\n",
    "#             }\n",
    "#             k = 0\n",
    "#             while k < len(j):\n",
    "#                 try:\n",
    "#                     foo =  sorted_tuplist[k][srt_ind[k]]\n",
    "#                 except IndexError:\n",
    "#                     found_one_list = False\n",
    "#                     break\n",
    "#                 for l in code_tuple_mapping_in[foo]:\n",
    "#                     if l in cache:\n",
    "#                         srt_ind[k] += 1\n",
    "#                         found_one_list = False\n",
    "#                         break\n",
    "#                 for l in code_tuple_mapping_in[foo]:\n",
    "#                     cache.add(l)\n",
    "#                 name_list.append(foo)\n",
    "#                 k += 1\n",
    "#             if(found_one_list):\n",
    "#                 del cache, name_list, srt_ind\n",
    "#                 break\n",
    "#         if(found_one_list):\n",
    "#             break      \n",
    "#     return name_list\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "d07acf66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:37.344126Z",
     "iopub.status.busy": "2024-10-17T09:15:37.343338Z",
     "iopub.status.idle": "2024-10-17T09:15:37.374719Z",
     "shell.execute_reply": "2024-10-17T09:15:37.373457Z"
    },
    "papermill": {
     "duration": 0.061475,
     "end_time": "2024-10-17T09:15:37.377126",
     "exception": false,
     "start_time": "2024-10-17T09:15:37.315651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/4847 [00:00<?, ?it/s]\n"
     ]
    }
   ],
   "source": [
    "from tqdm import tqdm\n",
    "for i in tqdm(range(len(train_in))):\n",
    "    cluster_selection_stratergy1(get_tuples_in_list(train_in[\"ingredients\"].iloc[i+3],tuple_code_mapping_in),5)\n",
    "    break\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "3533a492",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:15:37.431570Z",
     "iopub.status.busy": "2024-10-17T09:15:37.430741Z",
     "iopub.status.idle": "2024-10-17T09:15:37.727191Z",
     "shell.execute_reply": "2024-10-17T09:15:37.725505Z"
    },
    "papermill": {
     "duration": 0.326109,
     "end_time": "2024-10-17T09:15:37.729299",
     "exception": true,
     "start_time": "2024-10-17T09:15:37.403190",
     "status": "failed"
    },
    "tags": []
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'tuple_decoder' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[41], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mtuple_decoder\u001b[49m(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mn_2772_in\u001b[39m\u001b[38;5;124m'\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mn_1836_it\u001b[39m\u001b[38;5;124m'\u001b[39m,tuple_embeddings_in,tuple_embeddings_it,code_tuple_mapping_in,code_tuple_mapping_it)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'tuple_decoder' is not defined"
     ]
    }
   ],
   "source": [
    "tuple_decoder('n_2772_in','n_1836_it',tuple_embeddings_in,tuple_embeddings_it,code_tuple_mapping_in,code_tuple_mapping_it)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "18b554e6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T08:58:31.931268Z",
     "iopub.status.busy": "2024-10-17T08:58:31.930869Z",
     "iopub.status.idle": "2024-10-17T08:58:31.940213Z",
     "shell.execute_reply": "2024-10-17T08:58:31.938909Z",
     "shell.execute_reply.started": "2024-10-17T08:58:31.931227Z"
    },
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from torch.nn.functional import cosine_similarity\n",
    "def tuple_decoder(orignal_tuple, foreign_tuple, embedding_org, embedding_for,c_t_map_org,c_t_map_for): # TODO: Might need better replacement protocol\n",
    "    assert(len(c_t_map_org[orignal_tuple]) == len(c_t_map_for[foreign_tuple]))\n",
    "  \n",
    "    red = set(c_t_map_for[foreign_tuple])\n",
    "    print(red)\n",
    "    mapping = dict()\n",
    "    for i in c_t_map_org[orignal_tuple]:\n",
    "        mim_val = -10\n",
    "        mim_obj = None\n",
    "        for j in red:\n",
    "            \n",
    "#             print(embedding_org[tuple_code_mapping_in[(i,)]].shape,embedding_for[tuple_code_mapping_it[(j,)]].shape)\n",
    "            t = cosine_similarity(embedding_org[tuple_code_mapping_in[(i,)]],embedding_for[tuple_code_mapping_it[(j,)]],dim=0)\n",
    "            print(i,j,torch.abs(t))\n",
    "            if mim_val < torch.abs(t):\n",
    "                mim_val = t\n",
    "                mim_obj = j\n",
    "        red.remove(mim_obj)\n",
    "        mapping[i] = mim_obj\n",
    "        \n",
    "    return mapping"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5336d04e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:08:29.486968Z",
     "iopub.status.busy": "2024-10-17T09:08:29.486409Z",
     "iopub.status.idle": "2024-10-17T09:08:29.497644Z",
     "shell.execute_reply": "2024-10-17T09:08:29.496358Z",
     "shell.execute_reply.started": "2024-10-17T09:08:29.486911Z"
    },
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "x = df_it[\"tuple\"][df_it[\"len\"]  == 1].iloc[0]\n",
    "y =  df_in[\"name\"][df_in[\"len\"]  == 2].iloc[43]\n",
    "\n",
    "code_tuple_mapping_in[y]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "096f1f58",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T08:59:37.207942Z",
     "iopub.status.busy": "2024-10-17T08:59:37.207464Z",
     "iopub.status.idle": "2024-10-17T08:59:37.215393Z",
     "shell.execute_reply": "2024-10-17T08:59:37.213862Z",
     "shell.execute_reply.started": "2024-10-17T08:59:37.207900Z"
    },
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def get_foriegn_embeddings(name_org,c_t_org,KNNList_for,center_list_org,center_list_for,cluster_level):\n",
    "    x, y = knn_predict(tuple_embeddings_in[name_org] - center_list_org[cluster_level] + center_list_for[cluster_level],cluster_level)\n",
    "#     x, y = knn_predict(tuple_embeddings_in[name_org] ,cluster_level)\n",
    "    label = x\n",
    "    print(y)\n",
    "    return label\n",
    "\n",
    "def translate_list(old_ing_list,mapping):\n",
    "    new_ing_list = []\n",
    "    for i in old_ing_list:\n",
    "        try:\n",
    "            new_ing_list.append(mapping[i])\n",
    "        except KeyError:\n",
    "            new_ing_list.append(i)\n",
    "    return new_ing_list\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7b028dc9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T08:59:39.700116Z",
     "iopub.status.busy": "2024-10-17T08:59:39.699168Z",
     "iopub.status.idle": "2024-10-17T08:59:39.711122Z",
     "shell.execute_reply": "2024-10-17T08:59:39.709637Z",
     "shell.execute_reply.started": "2024-10-17T08:59:39.700069Z"
    },
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "code_tuple_mapping_it[get_foriegn_embeddings(y,code_tuple_mapping_in,ItalianKNN,central_embeddings_in,central_embeddings_it,1)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "767fb3ec",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T08:58:31.983058Z",
     "iopub.status.busy": "2024-10-17T08:58:31.982721Z",
     "iopub.status.idle": "2024-10-17T08:58:31.992643Z",
     "shell.execute_reply": "2024-10-17T08:58:31.991529Z",
     "shell.execute_reply.started": "2024-10-17T08:58:31.983024Z"
    },
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def helper(ingredient_list,name_list):\n",
    "    thershold = 0\n",
    "    success = False\n",
    "    ing_old = ingredient_list\n",
    "    for i in range(len(name_list)):\n",
    "        italian_name = get_foriegn_embeddings(\n",
    "            name_list[i],code_tuple_mapping_in,\n",
    "            ItalianKNN,central_embeddings_in,\n",
    "            central_embeddings_it,\n",
    "            len(code_tuple_mapping_in[name_list[i]]))\n",
    "        ing_new = translate_list(\n",
    "            ing_old,\n",
    "            tuple_decoder(\n",
    "                name_list[i],\n",
    "                italian_name,\n",
    "                tuple_embeddings_in,\n",
    "                tuple_embeddings_it,\n",
    "                code_tuple_mapping_in,\n",
    "                code_tuple_mapping_it\n",
    "            ))\n",
    "        print(ing_old, ing_new)\n",
    "        if(check_transformation_bert(model,ing_old,ing_new, \"ind\", \"ita\")):\n",
    "            thershold = i + len(code_tuple_mapping_in[name_list[i]])\n",
    "            sucess = True\n",
    "            break\n",
    "        else:\n",
    "            ing_old = ing_new\n",
    "    if(not success):\n",
    "        thershold = 1000\n",
    "    return thershold\n",
    "\n",
    "def get_threshold(ingredient_list, tuple_list): #returns mininum number of substitution to transform recipe\n",
    "    name_list = cluster_selection_stratergy1(tuple_list,1)\n",
    "    threshold = helper(ingredient_list,name_list)\n",
    "    \n",
    "#     for j in range(2,6):\n",
    "    name_list = cluster_selection_stratergy1(tuple_list,5)\n",
    "    threshold_new = helper(ingredient_list,name_list)\n",
    "    if(threshold_new < threshold ):\n",
    "        threshold = threshold_new\n",
    "    return threshold\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7efed3be",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T08:58:31.995656Z",
     "iopub.status.busy": "2024-10-17T08:58:31.994276Z",
     "iopub.status.idle": "2024-10-17T08:58:32.054542Z",
     "shell.execute_reply": "2024-10-17T08:58:32.053185Z",
     "shell.execute_reply.started": "2024-10-17T08:58:31.995614Z"
    },
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "inger = train_in.iloc[16][\"ingredients\"]\n",
    "get_threshold(inger,get_tuples_in_list(inger,tuple_code_mapping_in))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1bc69154",
   "metadata": {
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "source": [
    "## text prep"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c47fcf60",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T08:58:32.056991Z",
     "iopub.status.busy": "2024-10-17T08:58:32.056576Z",
     "iopub.status.idle": "2024-10-17T08:58:36.669648Z",
     "shell.execute_reply": "2024-10-17T08:58:36.668377Z",
     "shell.execute_reply.started": "2024-10-17T08:58:32.056951Z"
    },
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# import matplotlib.pyplot as /\n",
    "y = train_in[\"ingredients\"].apply(lambda x: get_tuples_in_list(x,tuple_code_mapping_in))\n",
    "len(train_in[train_in[\"ingredients\"].apply(lambda x: sum([len(i) for i in get_tuples_in_list(x,tuple_code_mapping_in).values()])) == 101])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84978ccd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:09:20.836462Z",
     "iopub.status.busy": "2024-10-17T09:09:20.836015Z",
     "iopub.status.idle": "2024-10-17T09:09:20.845515Z",
     "shell.execute_reply": "2024-10-17T09:09:20.843999Z",
     "shell.execute_reply.started": "2024-10-17T09:09:20.836423Z"
    },
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "cll = 4\n",
    "fn = df_in[\"tuple_embedding\"][df_in[\"len\"] == cll].to_list()\n",
    "# fn.append(central_embeddings_in[cll])\n",
    "ft = df_it[\"tuple_embedding\"][df_it[\"len\"] == cll].to_list()\n",
    "# ft.append(central_embeddings_it[cll])\n",
    "in_p = torch.stack(fn) #- central_embeddings_in[cll]\n",
    "it_p = torch.stack(ft) #- central_embeddings_it[cll]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "187ed0a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:02:03.384216Z",
     "iopub.status.busy": "2024-10-17T09:02:03.383029Z",
     "iopub.status.idle": "2024-10-17T09:02:03.394123Z",
     "shell.execute_reply": "2024-10-17T09:02:03.392769Z",
     "shell.execute_reply.started": "2024-10-17T09:02:03.384164Z"
    },
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "print(sh_np[-1,0],sh_np[-1,1])\n",
    "print(sh_nt[-1,0],sh_nt[-1,1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4ea8f82e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:02:06.834736Z",
     "iopub.status.busy": "2024-10-17T09:02:06.834284Z",
     "iopub.status.idle": "2024-10-17T09:02:06.844808Z",
     "shell.execute_reply": "2024-10-17T09:02:06.843473Z",
     "shell.execute_reply.started": "2024-10-17T09:02:06.834696Z"
    },
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "torch.norm(central_embeddings_in[cll] - central_embeddings_it[cll])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a42d1646",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:09:26.049356Z",
     "iopub.status.busy": "2024-10-17T09:09:26.048430Z",
     "iopub.status.idle": "2024-10-17T09:09:26.058720Z",
     "shell.execute_reply": "2024-10-17T09:09:26.057378Z",
     "shell.execute_reply.started": "2024-10-17T09:09:26.049308Z"
    },
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "sh_np = torch.pca_lowrank(in_p,3)[0]\n",
    "sh_nt = torch.pca_lowrank(it_p,3)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b58d3c7b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:09:31.018727Z",
     "iopub.status.busy": "2024-10-17T09:09:31.018226Z",
     "iopub.status.idle": "2024-10-17T09:09:31.028481Z",
     "shell.execute_reply": "2024-10-17T09:09:31.027049Z",
     "shell.execute_reply.started": "2024-10-17T09:09:31.018686Z"
    },
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "trap  = torch.pca_lowrank(torch.concat([in_p,it_p,torch.stack([central_embeddings_in[cll],central_embeddings_it[cll]])],axis=0),3)[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5585ee05",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:09:34.298924Z",
     "iopub.status.busy": "2024-10-17T09:09:34.298424Z",
     "iopub.status.idle": "2024-10-17T09:09:34.534311Z",
     "shell.execute_reply": "2024-10-17T09:09:34.532849Z",
     "shell.execute_reply.started": "2024-10-17T09:09:34.298882Z"
    },
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "plt.scatter(sh_np[:-1,0],sh_np[:-1,1])\n",
    "plt.scatter(sh_nt[:-1,0],sh_nt[:-1,1])\n",
    "plt.scatter(sh_np[-1,0],sh_np[-1,1])\n",
    "plt.scatter(sh_nt[-1,0],sh_nt[-1,1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f49ab657",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:09:40.125193Z",
     "iopub.status.busy": "2024-10-17T09:09:40.124670Z",
     "iopub.status.idle": "2024-10-17T09:09:40.390112Z",
     "shell.execute_reply": "2024-10-17T09:09:40.388768Z",
     "shell.execute_reply.started": "2024-10-17T09:09:40.125124Z"
    },
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(projection='3d')\n",
    "ax.scatter(sh_np[:-1,0],sh_np[:-1,1],sh_np[:-1,2])\n",
    "ax.scatter(sh_nt[:-1,0],sh_nt[:-1,1],sh_nt[:-1,2])\n",
    "ax.scatter(sh_np[-1,0],sh_np[-1,1],sh_np[-1,2])\n",
    "ax.scatter(sh_nt[-1,0],sh_nt[-1,1],sh_nt[-1,2])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9fe6b747",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-10-17T09:09:44.640963Z",
     "iopub.status.busy": "2024-10-17T09:09:44.639977Z",
     "iopub.status.idle": "2024-10-17T09:09:45.127892Z",
     "shell.execute_reply": "2024-10-17T09:09:45.126682Z",
     "shell.execute_reply.started": "2024-10-17T09:09:44.640910Z"
    },
    "papermill": {
     "duration": null,
     "end_time": null,
     "exception": null,
     "start_time": null,
     "status": "pending"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "plt.scatter(trap[:100,0],trap[:100,1])\n",
    "plt.scatter(trap[100:-2,0],trap[100:-2,1])\n",
    "plt.scatter(trap[-1,0],trap[-1,1])\n",
    "plt.scatter(trap[-2,0],trap[-2,1])\n",
    "plt.show()\n",
    "\n",
    "fig = plt.figure()\n",
    "ax = fig.add_subplot(projection='3d')\n",
    "ax.scatter(trap[:100,0],trap[:100,1],trap[:100,2])\n",
    "ax.scatter(trap[100:-2,0],trap[100:-2,1],trap[100:-2,2])\n",
    "ax.scatter(trap[-1,0],trap[-1,1],trap[-1,2])\n",
    "ax.scatter(trap[-2,0],trap[-2,1],trap[-2,2])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ecd3611",
   "metadata": {},
   "source": [
    "Argharupa - 24-10-2024"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e15470f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Install necessary libraries\n",
    "!pip install scikit-learn pandas numpy torch\n",
    "\n",
    "# Import Libraries\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import DataLoader, Dataset\n",
    "from sklearn.model_selection import train_test_split\n",
    "import ast\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import math\n",
    "\n",
    "# Define the preprocessing function\n",
    "def prep_ing(x):\n",
    "    return x.strip().replace(' ', '_')\n",
    "\n",
    "# Load and combine data for Indian and Italian cuisines\n",
    "cuisines = ['indian', 'italian']\n",
    "\n",
    "# Initialize lists to store dataframes\n",
    "dfs = []\n",
    "dfsi = []\n",
    "\n",
    "for i in range(1, 6):\n",
    "    # Load Indian recipes\n",
    "    indian_df = pd.read_csv(f\"/kaggle/input/bsd-dbs/indian_{i} (1).csv\")\n",
    "    indian_df[\"len\"] = i  # Assign 'len' as integer i\n",
    "    dfs.append(indian_df)\n",
    "    \n",
    "    # Load Italian recipes\n",
    "    italian_df = pd.read_csv(f\"/kaggle/input/bsd-dbs/italian_{i} (1).csv\")\n",
    "    italian_df[\"len\"] = i  # Assign 'len' as integer i\n",
    "    dfsi.append(italian_df)\n",
    "\n",
    "# Load 'all' datasets and correct the French to Italian\n",
    "indian_all_df = pd.read_csv(f\"/kaggle/input/bsd-dbs/indian_all.csv\")\n",
    "indian_all_df[\"len\"] = 1  # Assign 'len' as 1\n",
    "dfs.append(indian_all_df)\n",
    "\n",
    "italian_all_df = pd.read_csv(f\"/kaggle/input/bsd-dbs/italian_all.csv\")  # Corrected from 'french_all.csv' to 'italian_all.csv'\n",
    "italian_all_df[\"len\"] = 1  # Assign 'len' as 1\n",
    "dfsi.append(italian_all_df)\n",
    "\n",
    "# Concatenate dataframes for each cuisine\n",
    "df_in = pd.concat(dfs, axis=0).reset_index(drop=True)\n",
    "df_it = pd.concat(dfsi, axis=0).reset_index(drop=True)\n",
    "\n",
    "# Create 'tuple' column with preprocessed ingredients\n",
    "df_in[\"tuple\"] = df_in[\"name\"].apply(lambda x: tuple([prep_ing(i) for i in ast.literal_eval(x)]))\n",
    "df_it[\"tuple\"] = df_it[\"name\"].apply(lambda x: tuple([prep_ing(i) for i in ast.literal_eval(x)]))\n",
    "\n",
    "# Display a snippet of the Indian dataframe to verify\n",
    "print(\"Indian Recipes DataFrame Sample:\")\n",
    "print(df_in.head())\n",
    "\n",
    "# Load ingredient embeddings\n",
    "embedding_tensor = torch.load(\"/kaggle/input/ll-2203/ingredient_embeddings_final (2).pt\")\n",
    "\n",
    "# Load ingredient list\n",
    "with open(\"/kaggle/input/ll-2203/ingredients_list_final (1).txt\", \"r\") as f:\n",
    "    ingredients_list = f.read().split()\n",
    "\n",
    "# Create a mapping from ingredient name to its embedding\n",
    "assert len(ingredients_list) == embedding_tensor.shape[0], \"Mismatch between ingredients and embeddings.\"\n",
    "\n",
    "embedding_map = {ing: embedding_tensor[i] for i, ing in enumerate(ingredients_list)}\n",
    "\n",
    "# Define the embedding dimension\n",
    "embedding_dim = embedding_tensor.shape[1]  # e.g., 768\n",
    "\n",
    "# Function to compute recipe embedding\n",
    "def get_recipe_embedding(ingredients, embedding_map, embedding_dim=768):\n",
    "    valid_embeddings = [embedding_map[i] for i in ingredients if i in embedding_map]\n",
    "    if not valid_embeddings:\n",
    "        return torch.zeros(embedding_dim)\n",
    "    return torch.mean(torch.stack(valid_embeddings), dim=0)\n",
    "\n",
    "# Generate embeddings for Indian and Italian recipes\n",
    "df_in[\"embeds\"] = df_in[\"ingredients\"].apply(lambda x: get_recipe_embedding(x, embedding_map, embedding_dim))\n",
    "df_it[\"embeds\"] = df_it[\"ingredients\"].apply(lambda x: get_recipe_embedding(x, embedding_map, embedding_dim))\n",
    "\n",
    "# Display a snippet to verify embeddings\n",
    "print(\"\\nEmbeddings Sample (Indian):\")\n",
    "print(df_in[['ingredients', 'embeds']].head())\n",
    "\n",
    "# Add cuisine labels\n",
    "df_in['class'] = \"in\"    # Indian\n",
    "df_it['class'] = \"it\"    # Italian\n",
    "\n",
    "# Concatenate dataframes for classification\n",
    "combined_df = pd.concat([df_in, df_it], axis=0).reset_index(drop=True)\n",
    "\n",
    "# Assign numerical labels\n",
    "combined_df['label'] = combined_df['class'].apply(lambda x: 1 if x == 'in' else 0)\n",
    "\n",
    "# Split into training and testing sets\n",
    "train_df, test_df = train_test_split(combined_df, test_size=0.25, random_state=42, stratify=combined_df['label'])\n",
    "\n",
    "print(\"\\nTraining Data Sample:\")\n",
    "print(train_df[['ingredients', 'label']].head())\n",
    "\n",
    "print(\"\\nTesting Data Sample:\")\n",
    "print(test_df[['ingredients', 'label']].head())\n",
    "\n",
    "# Define Custom Dataset\n",
    "class CuisineDataset(Dataset):\n",
    "    def __init__(self, data):\n",
    "        self.embeds = torch.stack(data['embeds'].values)  # Shape: [num_samples, embedding_dim]\n",
    "        self.labels = torch.tensor(data['label'].values, dtype=torch.long)  # Shape: [num_samples]\n",
    "    \n",
    "    def __len__(self):\n",
    "        return len(self.labels)\n",
    "    \n",
    "    def __getitem__(self, idx):\n",
    "        return self.embeds[idx], self.labels[idx]\n",
    "\n",
    "# Create Datasets\n",
    "train_dataset = CuisineDataset(train_df)\n",
    "test_dataset = CuisineDataset(test_df)\n",
    "\n",
    "# Create DataLoaders\n",
    "train_loader = DataLoader(train_dataset, batch_size=16, shuffle=True)\n",
    "test_loader = DataLoader(test_dataset, batch_size=16, shuffle=False)\n",
    "\n",
    "print(\"\\nNumber of Training Samples:\", len(train_dataset))\n",
    "print(\"Number of Testing Samples:\", len(test_dataset))\n",
    "\n",
    "# Define MLP Model\n",
    "class MLP(nn.Module):\n",
    "    def __init__(self, input_dim=768, hidden_dim=39, output_dim=2):\n",
    "        super(MLP, self).__init__()\n",
    "        self.layers = nn.Sequential(\n",
    "            nn.Linear(input_dim, hidden_dim),\n",
    "            nn.ReLU(),\n",
    "            nn.Linear(hidden_dim, output_dim)\n",
    "        )\n",
    "    \n",
    "    def forward(self, x):\n",
    "        x = self.layers(x.float())\n",
    "        return x\n",
    "\n",
    "# Instantiate the model\n",
    "input_dim = embedding_dim  # 768\n",
    "hidden_dim = int(math.sqrt(2 * input_dim))  # e.g., sqrt(2*768) ≈ 39\n",
    "output_dim = 2  # Indian and Italian\n",
    "\n",
    "model = MLP(input_dim=input_dim, hidden_dim=hidden_dim, output_dim=output_dim)\n",
    "\n",
    "# Device Configuration\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(\"\\nUsing device:\", device)\n",
    "\n",
    "model.to(device)\n",
    "\n",
    "# Define Loss and Optimizer\n",
    "criterion = nn.CrossEntropyLoss()\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.001)\n",
    "\n",
    "# Training Loop\n",
    "num_epochs = 20\n",
    "\n",
    "for epoch in range(num_epochs):\n",
    "    model.train()\n",
    "    running_loss = 0.0\n",
    "    for inputs, labels in train_loader:\n",
    "        inputs, labels = inputs.to(device), labels.to(device)\n",
    "        \n",
    "        optimizer.zero_grad()\n",
    "        outputs = model(inputs)\n",
    "        loss = criterion(outputs, labels)\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "        \n",
    "        running_loss += loss.item()\n",
    "    \n",
    "    avg_loss = running_loss / len(train_loader)\n",
    "    print(f\"Epoch [{epoch+1}/{num_epochs}], Loss: {avg_loss:.4f}\")\n",
    "\n",
    "# Function to Evaluate Model\n",
    "def evaluate_model(model, data_loader, device):\n",
    "    model.eval()\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    all_preds = []\n",
    "    all_labels = []\n",
    "    \n",
    "    with torch.no_grad():\n",
    "        for inputs, labels in data_loader:\n",
    "            inputs, labels = inputs.to(device), labels.to(device)\n",
    "            outputs = model(inputs)\n",
    "            _, predicted = torch.max(outputs.data, 1)\n",
    "            total += labels.size(0)\n",
    "            correct += (predicted == labels).sum().item()\n",
    "            \n",
    "            all_preds.extend(predicted.cpu().numpy())\n",
    "            all_labels.extend(labels.cpu().numpy())\n",
    "    \n",
    "    accuracy = 100 * correct / total\n",
    "    return accuracy, all_preds, all_labels\n",
    "\n",
    "# Evaluate on Training Data\n",
    "train_accuracy, train_preds, train_labels = evaluate_model(model, train_loader, device)\n",
    "print(f\"\\nTraining Accuracy: {train_accuracy:.2f}%\")\n",
    "\n",
    "# Evaluate on Testing Data\n",
    "test_accuracy, test_preds, test_labels = evaluate_model(model, test_loader, device)\n",
    "print(f\"Testing Accuracy: {test_accuracy:.2f}%\")\n",
    "\n",
    "# Detailed Evaluation Metrics\n",
    "print(\"\\nClassification Report (Test Data):\")\n",
    "print(classification_report(test_labels, test_preds, target_names=['Italian', 'Indian']))\n",
    "\n",
    "# Confusion Matrix\n",
    "cm = confusion_matrix(test_labels, test_preds)\n",
    "plt.figure(figsize=(6,4))\n",
    "sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['Italian', 'Indian'], yticklabels=['Italian', 'Indian'])\n",
    "plt.ylabel('Actual')\n",
    "plt.xlabel('Predicted')\n",
    "plt.title('Confusion Matrix (Test Data)')\n",
    "plt.show()\n",
    "\n",
    "# Save the model's state dictionary\n",
    "torch.save(model.state_dict(), \"cuisine_classifier_state_dict.pt\")\n",
    "print(\"\\nModel saved to 'cuisine_classifier_state_dict.pt'\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "47da7e5a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 5670256,
     "sourceId": 9640096,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5884179,
     "sourceId": 9640202,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 5887847,
     "sourceId": 9644939,
     "sourceType": "datasetVersion"
    },
    {
     "modelId": 126931,
     "modelInstanceId": 102709,
     "sourceId": 122064,
     "sourceType": "modelInstanceVersion"
    },
    {
     "modelId": 139823,
     "modelInstanceId": 116605,
     "sourceId": 137728,
     "sourceType": "modelInstanceVersion"
    }
   ],
   "dockerImageVersionId": 30775,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 44.60257,
   "end_time": "2024-10-17T09:15:38.981424",
   "environment_variables": {},
   "exception": true,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-10-17T09:14:54.378854",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
